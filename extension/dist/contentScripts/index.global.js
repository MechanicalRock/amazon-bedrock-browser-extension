(function(){"use strict";var Fi=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function Mr(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function vt(e){if(e.__esModule)return e;var t=e.default;if(typeof t=="function"){var r=function n(){return this instanceof n?Reflect.construct(t,arguments,this.constructor):t.apply(this,arguments)};r.prototype=t.prototype}else r={};return Object.defineProperty(r,"__esModule",{value:!0}),Object.keys(e).forEach(function(n){var s=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(r,n,s.get?s:{enumerable:!0,get:function(){return e[n]}})}),r}var At={exports:{}};const Ni=e=>typeof crypto<"u"&&typeof crypto.getRandomValues=="function"?()=>{const t=crypto.getRandomValues(new Uint8Array(1))[0];return(t>=e?t%e:t).toString(e)}:()=>Math.floor(Math.random()*e).toString(e),Dr=(e=7,t=!1)=>Array.from({length:e},Ni(t?16:36)).join("");At.exports=Dr,At.exports.default=Dr;var Li=At.exports;const ot=Mr(Li);var Ui=()=>`uid::${ot(7)}`,ji=(e,t=["endpointName","fingerprint"])=>typeof e=="object"&&e!==null&&t.every(r=>r in e),Hi=e=>{if(!ji(e))throw new TypeError("Invalid connection args");return JSON.stringify(e)},zi=()=>{let e=[];return{add:(...t)=>{e=[...e,...t]},remove:t=>{e=typeof t=="string"?e.filter(r=>r.message.transactionId!==t):e.filter(r=>!t.includes(r))},entries:()=>e}},xt=class{static toBackground(e,t){return e.postMessage(t)}static toExtensionContext(e,t){return e.postMessage(t)}},Pr={exports:{}};(function(e,t){(function(r,n){n(e)})(typeof globalThis<"u"?globalThis:typeof self<"u"?self:Fi,function(r){if(typeof globalThis!="object"||typeof chrome!="object"||!chrome||!chrome.runtime||!chrome.runtime.id)throw new Error("This script should only be loaded in a browser extension.");if(typeof globalThis.browser>"u"||Object.getPrototypeOf(globalThis.browser)!==Object.prototype){const n="The message port closed before a response was received.",s="Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)",i=o=>{const a={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0},elements:{createSidebarPane:{minArgs:1,maxArgs:1}}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},goBack:{minArgs:0,maxArgs:1},goForward:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(Object.keys(a).length===0)throw new Error("api-metadata.json has not been included in browser-polyfill");class c extends WeakMap{constructor(b,x=void 0){super(x),this.createItem=b}get(b){return this.has(b)||this.set(b,this.createItem(b)),super.get(b)}}const u=w=>w&&typeof w=="object"&&typeof w.then=="function",d=(w,b)=>(...x)=>{o.runtime.lastError?w.reject(new Error(o.runtime.lastError.message)):b.singleCallbackArg||x.length<=1&&b.singleCallbackArg!==!1?w.resolve(x[0]):w.resolve(x)},l=w=>w==1?"argument":"arguments",f=(w,b)=>function(E,...B){if(B.length<b.minArgs)throw new Error(`Expected at least ${b.minArgs} ${l(b.minArgs)} for ${w}(), got ${B.length}`);if(B.length>b.maxArgs)throw new Error(`Expected at most ${b.maxArgs} ${l(b.maxArgs)} for ${w}(), got ${B.length}`);return new Promise((j,z)=>{if(b.fallbackToNoCallback)try{E[w](...B,d({resolve:j,reject:z},b))}catch(A){console.warn(`${w} API method doesn't seem to support the callback parameter, falling back to call it without a callback: `,A),E[w](...B),b.fallbackToNoCallback=!1,b.noCallback=!0,j()}else b.noCallback?(E[w](...B),j()):E[w](...B,d({resolve:j,reject:z},b))})},h=(w,b,x)=>new Proxy(b,{apply(E,B,j){return x.call(B,w,...j)}});let p=Function.call.bind(Object.prototype.hasOwnProperty);const g=(w,b={},x={})=>{let E=Object.create(null),B={has(z,A){return A in w||A in E},get(z,A,q){if(A in E)return E[A];if(!(A in w))return;let D=w[A];if(typeof D=="function")if(typeof b[A]=="function")D=h(w,w[A],b[A]);else if(p(x,A)){let Te=f(A,x[A]);D=h(w,w[A],Te)}else D=D.bind(w);else if(typeof D=="object"&&D!==null&&(p(b,A)||p(x,A)))D=g(D,b[A],x[A]);else if(p(x,"*"))D=g(D,b[A],x["*"]);else return Object.defineProperty(E,A,{configurable:!0,enumerable:!0,get(){return w[A]},set(Te){w[A]=Te}}),D;return E[A]=D,D},set(z,A,q,D){return A in E?E[A]=q:w[A]=q,!0},defineProperty(z,A,q){return Reflect.defineProperty(E,A,q)},deleteProperty(z,A){return Reflect.deleteProperty(E,A)}},j=Object.create(w);return new Proxy(j,B)},y=w=>({addListener(b,x,...E){b.addListener(w.get(x),...E)},hasListener(b,x){return b.hasListener(w.get(x))},removeListener(b,x){b.removeListener(w.get(x))}}),v=new c(w=>typeof w!="function"?w:function(x){const E=g(x,{},{getContent:{minArgs:0,maxArgs:0}});w(E)});let S=!1;const _=new c(w=>typeof w!="function"?w:function(x,E,B){let j=!1,z,A=new Promise(it=>{z=function(ee){S||(console.warn(s,new Error().stack),S=!0),j=!0,it(ee)}}),q;try{q=w(x,E,z)}catch(it){q=Promise.reject(it)}const D=q!==!0&&u(q);if(q!==!0&&!D&&!j)return!1;const Te=it=>{it.then(ee=>{B(ee)},ee=>{let Tr;ee&&(ee instanceof Error||typeof ee.message=="string")?Tr=ee.message:Tr="An unexpected error occurred",B({__mozWebExtensionPolyfillReject__:!0,message:Tr})}).catch(ee=>{console.error("Failed to send onMessage rejected reply",ee)})};return Te(D?q:A),!0}),F=({reject:w,resolve:b},x)=>{o.runtime.lastError?o.runtime.lastError.message===n?b():w(new Error(o.runtime.lastError.message)):x&&x.__mozWebExtensionPolyfillReject__?w(new Error(x.message)):b(x)},le=(w,b,x,...E)=>{if(E.length<b.minArgs)throw new Error(`Expected at least ${b.minArgs} ${l(b.minArgs)} for ${w}(), got ${E.length}`);if(E.length>b.maxArgs)throw new Error(`Expected at most ${b.maxArgs} ${l(b.maxArgs)} for ${w}(), got ${E.length}`);return new Promise((B,j)=>{const z=F.bind(null,{resolve:B,reject:j});E.push(z),x.sendMessage(...E)})},ye={devtools:{network:{onRequestFinished:y(v)}},runtime:{onMessage:y(_),onMessageExternal:y(_),sendMessage:le.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:le.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},we={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return a.privacy={network:{"*":we},services:{"*":we},websites:{"*":we}},g(o,ye,a)};r.exports=i(chrome)}else r.exports=globalThis.browser})})(Pr);var qi=Pr.exports;const Wi=Mr(qi);var Gi=(e="")=>{const t=Ui();let r,n=[];const s=zi(),i=new Set,o=new Set,a=(u,d)=>{switch(u.status){case"undeliverable":n.some(l=>l.message.messageID===u.message.messageID)||(n=[...n,{message:u.message,resolvedDestination:u.resolvedDestination}]);return;case"deliverable":n=n.reduce((l,f)=>f.resolvedDestination===u.deliverableTo?(xt.toBackground(d,{type:"deliver",message:f.message}),l):[...l,f],[]);return;case"delivered":u.receipt.message.messageType==="message"&&s.add(u.receipt);return;case"incoming":u.message.messageType==="reply"&&s.remove(u.message.messageID),i.forEach(l=>l(u.message,d));return;case"terminated":{const l=s.entries().filter(f=>u.fingerprint===f.to);s.remove(l),l.forEach(({message:f})=>o.forEach(h=>h(f)))}}},c=()=>{r=Wi.runtime.connect({name:Hi({endpointName:e,fingerprint:t})}),r.onMessage.addListener(a),r.onDisconnect.addListener(c),xt.toBackground(r,{type:"sync",pendingResponses:s.entries(),pendingDeliveries:[...new Set(n.map(({resolvedDestination:u})=>u))]})};return c(),{onFailure(u){o.add(u)},onMessage(u){i.add(u)},postMessage(u){xt.toBackground(r,{type:"deliver",message:u})}}},St,Vi=(e,t,r)=>St??(St=new Promise(n=>{const s=o=>{const{data:{cmd:a,scope:c,context:u},ports:d}=o;if(a==="webext-port-offer"&&c===t&&u!==e)return window.removeEventListener("message",s),d[0].onmessage=r,d[0].postMessage("port-accepted"),n(d[0])},i=()=>{const o=new MessageChannel;o.port1.onmessage=a=>{if(a.data==="port-accepted")return window.removeEventListener("message",s),n(o.port1);r==null||r(a)},window.postMessage({cmd:"webext-port-offer",scope:t,context:e},"*",[o.port2])};window.addEventListener("message",s),e==="window"?setTimeout(i,0):i()})),Ki=e=>{let t,r=!1,n,s;return{enable:()=>r=!0,onMessage:i=>n=i,postMessage:async i=>{if(e!=="content-script"&&e!=="window")throw new Error("Endpoint does not use postMessage");if(!r)throw new Error("Communication with window has not been allowed");return Zi(t),(await s).postMessage(i)},setNamespace:i=>{if(t)throw new Error("Namespace once set cannot be changed");t=i,s=Vi(e,i,({data:o})=>n==null?void 0:n(o))}}};function Zi(e){if(typeof e!="string"||e.trim().length===0)throw new Error(`webext-bridge uses window.postMessage to talk with other "window"(s) for message routingwhich is global/conflicting operation in case there are other scripts using webext-bridge. Call Bridge#setNamespace(nsps) to isolate your app. Example: setNamespace('com.facebook.react-devtools'). Make sure to use same namespace across all your scripts whereever window.postMessage is likely to be used\``)}var Xi=Object.defineProperty,Qi=Object.defineProperties,Ji=Object.getOwnPropertyDescriptors,Br=Object.getOwnPropertySymbols,Yi=Object.prototype.hasOwnProperty,eo=Object.prototype.propertyIsEnumerable,kr=(e,t,r)=>t in e?Xi(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,Ir=(e,t)=>{for(var r in t||(t={}))Yi.call(t,r)&&kr(e,r,t[r]);if(Br)for(var r of Br(t))eo.call(t,r)&&kr(e,r,t[r]);return e},Or=(e,t)=>Qi(e,Ji(t)),to=/^((?:background$)|devtools|popup|options|content-script|window)(?:@(\d+)(?:\.(\d+))?)?$/,$r=e=>{const[,t,r,n]=e.match(to)||[];return{context:t,tabId:+r,frameId:n?+n:void 0}};const ro=[{property:"name",enumerable:!1},{property:"message",enumerable:!1},{property:"stack",enumerable:!1},{property:"code",enumerable:!0}],Et=Symbol(".toJSON was called"),no=e=>{e[Et]=!0;const t=e.toJSON();return delete e[Et],t},Fr=({from:e,seen:t,to_:r,forceEnumerable:n,maxDepth:s,depth:i})=>{const o=r||(Array.isArray(e)?[]:{});if(t.push(e),i>=s)return o;if(typeof e.toJSON=="function"&&e[Et]!==!0)return no(e);for(const[a,c]of Object.entries(e)){if(typeof Buffer=="function"&&Buffer.isBuffer(c)){o[a]="[object Buffer]";continue}if(c!==null&&typeof c=="object"&&typeof c.pipe=="function"){o[a]="[object Stream]";continue}if(typeof c!="function"){if(!c||typeof c!="object"){o[a]=c;continue}if(!t.includes(e[a])){i++,o[a]=Fr({from:e[a],seen:[...t],forceEnumerable:n,maxDepth:s,depth:i});continue}o[a]="[Circular]"}}for(const{property:a,enumerable:c}of ro)typeof e[a]=="string"&&Object.defineProperty(o,a,{value:e[a],enumerable:n?!0:c,configurable:!0,writable:!0});return o};function so(e,t={}){const{maxDepth:r=Number.POSITIVE_INFINITY}=t;return typeof e=="object"&&e!==null?Fr({from:e,seen:[],forceEnumerable:!0,maxDepth:r,depth:0}):typeof e=="function"?`[Function: ${e.name||"anonymous"}]`:e}let Nr=()=>({events:{},emit(e,...t){(this.events[e]||[]).forEach(r=>r(...t))},on(e,t){return(this.events[e]=this.events[e]||[]).push(t),()=>this.events[e]=(this.events[e]||[]).filter(r=>r!==t)}});var io=(e,t,r)=>{const n=ot(),s=new Map,i=new Map,o=a=>{if(a.destination.context===e&&!a.destination.frameId&&!a.destination.tabId){r==null||r(a);const{transactionId:c,messageID:u,messageType:d}=a,l=()=>{const h=s.get(c);if(h){const{err:p,data:g}=a;if(p){const y=p,v=self[y.name],S=new(typeof v=="function"?v:Error)(y.message);for(const _ in y)S[_]=y[_];h.reject(S)}else h.resolve(g);s.delete(c)}},f=async()=>{let h,p,g=!1;try{const y=i.get(u);if(typeof y=="function")h=await y({sender:a.origin,id:u,data:a.data,timestamp:a.timestamp});else throw g=!0,new Error(`[webext-bridge] No handler registered in '${e}' to accept messages with id '${u}'`)}catch(y){p=y}finally{if(p&&(a.err=so(p)),o(Or(Ir({},a),{messageType:"reply",data:h,origin:{context:e,tabId:null},destination:a.origin,hops:[]})),p&&!g)throw h}};switch(d){case"reply":return l();case"message":return f()}}return a.hops.push(`${e}::${n}`),t(a)};return{handleMessage:o,endTransaction:a=>{const c=s.get(a);c==null||c.reject("Transaction was ended before it could complete"),s.delete(a)},sendMessage:(a,c,u="background")=>{const d=typeof u=="string"?$r(u):u,l="Bridge#sendMessage ->";if(!d.context)throw new TypeError(`${l} Destination must be any one of known destinations`);return new Promise((f,h)=>{const p={messageID:a,data:c,destination:d,messageType:"message",transactionId:ot(),origin:{context:e,tabId:null},hops:[],timestamp:Date.now()};s.set(p.transactionId,{resolve:f,reject:h});try{o(p)}catch(g){s.delete(p.transactionId),h(g)}})},onMessage:(a,c)=>(i.set(a,c),()=>i.delete(a))}},be=class{constructor(e,t){this.endpointRuntime=e,this.streamInfo=t,this.emitter=Nr(),this.isClosed=!1,this.handleStreamClose=()=>{this.isClosed||(this.isClosed=!0,this.emitter.emit("closed",!0),this.emitter.events={})},be.initDone||(e.onMessage("__crx_bridge_stream_transfer__",r=>{const{streamId:n,streamTransfer:s,action:i}=r.data,o=be.openStreams.get(n);o&&!o.isClosed&&(i==="transfer"&&o.emitter.emit("message",s),i==="close"&&(be.openStreams.delete(n),o.handleStreamClose()))}),be.initDone=!0),be.openStreams.set(this.streamInfo.streamId,this)}get info(){return this.streamInfo}send(e){if(this.isClosed)throw new Error("Attempting to send a message over closed stream. Use stream.onClose(<callback>) to keep an eye on stream status");this.endpointRuntime.sendMessage("__crx_bridge_stream_transfer__",{streamId:this.streamInfo.streamId,streamTransfer:e,action:"transfer"},this.streamInfo.endpoint)}close(e){e&&this.send(e),this.handleStreamClose(),this.endpointRuntime.sendMessage("__crx_bridge_stream_transfer__",{streamId:this.streamInfo.streamId,streamTransfer:null,action:"close"},this.streamInfo.endpoint)}onMessage(e){return this.getDisposable("message",e)}onClose(e){return this.getDisposable("closed",e)}getDisposable(e,t){const r=this.emitter.on(e,t);return Object.assign(r,{dispose:r,close:r})}},at=be;at.initDone=!1,at.openStreams=new Map;var oo=e=>{const t=new Map,r=new Map,n=Nr();e.onMessage("__crx_bridge_stream_open__",o=>new Promise(a=>{const{sender:c,data:u}=o,{channel:d}=u;let l=!1,f=()=>{};const h=()=>{const p=r.get(d);typeof p=="function"?(p(new at(e,Or(Ir({},u),{endpoint:c}))),l&&f(),a(!0)):l||(l=!0,f=n.on("did-change-stream-callbacks",h))};h()}));async function s(o,a){if(t.has(o))throw new Error("webext-bridge: A Stream is already open at this channel");const c=typeof a=="string"?$r(a):a,u={streamId:ot(),channel:o,endpoint:c},d=new at(e,u);return d.onClose(()=>t.delete(o)),await e.sendMessage("__crx_bridge_stream_open__",u,c),t.set(o,d),d}function i(o,a){if(r.has(o))throw new Error("webext-bridge: This channel has already been claimed. Stream allows only one-on-one communication");r.set(o,a),n.emit("did-change-stream-callbacks")}return{openStream:s,onOpenStreamChannel:i}},Ct=Ki("content-script"),_t=Gi(),Me=io("content-script",e=>{e.destination.context==="window"?Ct.postMessage(e):_t.postMessage(e)});Ct.onMessage(e=>{e.origin={context:"window",tabId:null},Me.handleMessage(e)}),_t.onMessage(Me.handleMessage),_t.onFailure(e=>{if(e.origin.context==="window"){Ct.postMessage({type:"error",transactionID:e.transactionId});return}Me.endTransaction(e.transactionId)});var{sendMessage:ve,onMessage:De}=Me;oo(Me);var Rt="";function ao(e){return Rt=e,Rt}function Tt(e,t){return(t==null?void 0:t.noPrefix)===!0?e:`${Rt}${e}`}function G(e,t,r){var n=Tt(e,r);try{localStorage.setItem(n,JSON.stringify({data:t}))}catch{console&&console.warn(`Lockr didn't successfully save the '{"${e}": "${t}"}' pair, because the localStorage is full.`)}}function co(e,t){const r=Tt(e,t);return localStorage.removeItem(r)}function H(e,t,r){const n=Tt(e,r);let s;const i=localStorage.getItem(n);try{i!==null&&(s=JSON.parse(i))}catch{localStorage[n]?s={data:localStorage.getItem(n)}:s=null}if(s){if(typeof s=="object"&&typeof s.data<"u")return s.data}else return t}ao("amazonTranslate_");const Lr=e=>{let t=e.httpHandler;return{setHttpHandler(r){t=r},httpHandler(){return t},updateHttpClientConfig(r,n){t.updateHttpClientConfig(r,n)},httpHandlerConfigs(){return t.httpHandlerConfigs()}}},Ur=e=>({httpHandler:e.httpHandler()});var jr;(function(e){e.HEADER="header",e.QUERY="query"})(jr||(jr={}));var Hr;(function(e){e.HEADER="header",e.QUERY="query"})(Hr||(Hr={}));var Pe;(function(e){e.HTTP="http",e.HTTPS="https"})(Pe||(Pe={}));var ct;(function(e){e.MD5="md5",e.CRC32="crc32",e.CRC32C="crc32c",e.SHA1="sha1",e.SHA256="sha256"})(ct||(ct={}));var zr;(function(e){e[e.HEADER=0]="HEADER",e[e.TRAILER=1]="TRAILER"})(zr||(zr={}));const Mt="__smithy_context";var qr;(function(e){e.PROFILE="profile",e.SSO_SESSION="sso-session",e.SERVICES="services"})(qr||(qr={}));var Wr;(function(e){e.HTTP_0_9="http/0.9",e.HTTP_1_0="http/1.0",e.TDS_8_0="tds/8.0"})(Wr||(Wr={}));class V{constructor(t){this.method=t.method||"GET",this.hostname=t.hostname||"localhost",this.port=t.port,this.query=t.query||{},this.headers=t.headers||{},this.body=t.body,this.protocol=t.protocol?t.protocol.slice(-1)!==":"?`${t.protocol}:`:t.protocol:"https:",this.path=t.path?t.path.charAt(0)!=="/"?`/${t.path}`:t.path:"/",this.username=t.username,this.password=t.password,this.fragment=t.fragment}static isInstance(t){if(!t)return!1;const r=t;return"method"in r&&"protocol"in r&&"hostname"in r&&"path"in r&&typeof r.query=="object"&&typeof r.headers=="object"}clone(){const t=new V({...this,headers:{...this.headers}});return t.query&&(t.query=uo(t.query)),t}}function uo(e){return Object.keys(e).reduce((t,r)=>{const n=e[r];return{...t,[r]:Array.isArray(n)?[...n]:n}},{})}class ut{constructor(t){this.statusCode=t.statusCode,this.reason=t.reason,this.headers=t.headers||{},this.body=t.body}static isInstance(t){if(!t)return!1;const r=t;return typeof r.statusCode=="number"&&typeof r.headers=="object"}}function ll(e){return e}const lo=e=>t=>async r=>{if(!V.isInstance(r.request))return t(r);const{request:n}=r,{handlerProtocol:s=""}=e.requestHandler.metadata||{};if(s.indexOf("h2")>=0&&!n.headers[":authority"])delete n.headers.host,n.headers[":authority"]=n.hostname+(n.port?":"+n.port:"");else if(!n.headers.host){let i=n.hostname;n.port!=null&&(i+=`:${n.port}`),n.headers.host=i}return t(r)},fo={name:"hostHeaderMiddleware",step:"build",priority:"low",tags:["HOST"],override:!0},Gr=e=>({applyToStack:t=>{t.add(lo(e),fo)}}),ho=()=>(e,t)=>async r=>{var n,s;try{const i=await e(r),{clientName:o,commandName:a,logger:c,dynamoDbDocumentClientOptions:u={}}=t,{overrideInputFilterSensitiveLog:d,overrideOutputFilterSensitiveLog:l}=u,f=d??t.inputFilterSensitiveLog,h=l??t.outputFilterSensitiveLog,{$metadata:p,...g}=i.output;return(n=c==null?void 0:c.info)==null||n.call(c,{clientName:o,commandName:a,input:f(r.input),output:h(g),metadata:p}),i}catch(i){const{clientName:o,commandName:a,logger:c,dynamoDbDocumentClientOptions:u={}}=t,{overrideInputFilterSensitiveLog:d}=u,l=d??t.inputFilterSensitiveLog;throw(s=c==null?void 0:c.error)==null||s.call(c,{clientName:o,commandName:a,input:l(r.input),error:i,metadata:i.$metadata}),i}},po={name:"loggerMiddleware",tags:["LOGGER"],step:"initialize",override:!0},Vr=e=>({applyToStack:t=>{t.add(ho(),po)}}),Kr="X-Amzn-Trace-Id",mo="AWS_LAMBDA_FUNCTION_NAME",go="_X_AMZN_TRACE_ID",yo=e=>t=>async r=>{const{request:n}=r;if(!V.isInstance(n)||e.runtime!=="node"||n.headers.hasOwnProperty(Kr))return t(r);const s=process.env[mo],i=process.env[go],o=a=>typeof a=="string"&&a.length>0;return o(s)&&o(i)&&(n.headers[Kr]=i),t({...r,request:n})},wo={step:"build",tags:["RECURSION_DETECTION"],name:"recursionDetectionMiddleware",override:!0,priority:"low"},Zr=e=>({applyToStack:t=>{t.add(yo(e),wo)}});function Xr(e){return{...e,customUserAgent:typeof e.customUserAgent=="string"?[[e.customUserAgent]]:e.customUserAgent}}const bo=new RegExp("^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$"),Qr=e=>bo.test(e)||e.startsWith("[")&&e.endsWith("]"),vo=new RegExp("^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$"),Dt=(e,t=!1)=>{if(!t)return vo.test(e);const r=e.split(".");for(const n of r)if(!Dt(n))return!1;return!0},Be={},ke="endpoints";function se(e){return typeof e!="object"||e==null?e:"ref"in e?`$${se(e.ref)}`:"fn"in e?`${e.fn}(${(e.argv||[]).map(se).join(", ")})`:JSON.stringify(e,null,2)}class N extends Error{constructor(t){super(t),this.name="EndpointError"}}const Ao=(e,t)=>e===t,xo=e=>{const t=e.split("."),r=[];for(const n of t){const s=n.indexOf("[");if(s!==-1){if(n.indexOf("]")!==n.length-1)throw new N(`Path: '${e}' does not end with ']'`);const i=n.slice(s+1,-1);if(Number.isNaN(parseInt(i)))throw new N(`Invalid array index: '${i}' in path: '${e}'`);s!==0&&r.push(n.slice(0,s)),r.push(i)}else r.push(n)}return r},Jr=(e,t)=>xo(t).reduce((r,n)=>{if(typeof r!="object")throw new N(`Index '${n}' in '${t}' not found in '${JSON.stringify(e)}'`);return Array.isArray(r)?r[parseInt(n)]:r[n]},e),So=e=>e!=null,Eo=e=>!e,Pt={[Pe.HTTP]:80,[Pe.HTTPS]:443},Co={booleanEquals:Ao,getAttr:Jr,isSet:So,isValidHostLabel:Dt,not:Eo,parseURL:e=>{const t=(()=>{try{if(e instanceof URL)return e;if(typeof e=="object"&&"hostname"in e){const{hostname:f,port:h,protocol:p="",path:g="",query:y={}}=e,v=new URL(`${p}//${f}${h?`:${h}`:""}${g}`);return v.search=Object.entries(y).map(([S,_])=>`${S}=${_}`).join("&"),v}return new URL(e)}catch{return null}})();if(!t)return console.error(`Unable to parse ${JSON.stringify(e)} as a whatwg URL.`),null;const r=t.href,{host:n,hostname:s,pathname:i,protocol:o,search:a}=t;if(a)return null;const c=o.slice(0,-1);if(!Object.values(Pe).includes(c))return null;const u=Qr(s),d=r.includes(`${n}:${Pt[c]}`)||typeof e=="string"&&e.includes(`${n}:${Pt[c]}`),l=`${n}${d?`:${Pt[c]}`:""}`;return{scheme:c,authority:l,path:i,normalizedPath:i.endsWith("/")?i:`${i}/`,isIp:u}},stringEquals:(e,t)=>e===t,substring:(e,t,r,n)=>t>=r||e.length<r?null:n?e.substring(e.length-r,e.length-t):e.substring(t,r),uriEncode:e=>encodeURIComponent(e).replace(/[!*'()]/g,t=>`%${t.charCodeAt(0).toString(16).toUpperCase()}`)},Yr=(e,t)=>{const r=[],n={...t.endpointParams,...t.referenceRecord};let s=0;for(;s<e.length;){const i=e.indexOf("{",s);if(i===-1){r.push(e.slice(s));break}r.push(e.slice(s,i));const o=e.indexOf("}",i);if(o===-1){r.push(e.slice(i));break}e[i+1]==="{"&&e[o+1]==="}"&&(r.push(e.slice(i+1,o)),s=o+2);const a=e.substring(i+1,o);if(a.includes("#")){const[c,u]=a.split("#");r.push(Jr(n[c],u))}else r.push(n[a]);s=o+1}return r.join("")},_o=({ref:e},t)=>({...t.endpointParams,...t.referenceRecord})[e],dt=(e,t,r)=>{if(typeof e=="string")return Yr(e,r);if(e.fn)return en(e,r);if(e.ref)return _o(e,r);throw new N(`'${t}': ${String(e)} is not a string, function or reference.`)},en=({fn:e,argv:t},r)=>{const n=t.map(i=>["boolean","number"].includes(typeof i)?i:dt(i,"arg",r)),s=e.split(".");return s[0]in Be&&s[1]!=null?Be[s[0]][s[1]](...n):Co[e](...n)},Ro=({assign:e,...t},r)=>{var s,i;if(e&&e in r.referenceRecord)throw new N(`'${e}' is already defined in Reference Record.`);const n=en(t,r);return(i=(s=r.logger)==null?void 0:s.debug)==null||i.call(s,ke,`evaluateCondition: ${se(t)} = ${se(n)}`),{result:n===""?!0:!!n,...e!=null&&{toAssign:{name:e,value:n}}}},Bt=(e=[],t)=>{var n,s;const r={};for(const i of e){const{result:o,toAssign:a}=Ro(i,{...t,referenceRecord:{...t.referenceRecord,...r}});if(!o)return{result:o};a&&(r[a.name]=a.value,(s=(n=t.logger)==null?void 0:n.debug)==null||s.call(n,ke,`assign: ${a.name} := ${se(a.value)}`))}return{result:!0,referenceRecord:r}},To=(e,t)=>Object.entries(e).reduce((r,[n,s])=>({...r,[n]:s.map(i=>{const o=dt(i,"Header value entry",t);if(typeof o!="string")throw new N(`Header '${n}' value '${o}' is not a string`);return o})}),{}),tn=(e,t)=>{if(Array.isArray(e))return e.map(r=>tn(r,t));switch(typeof e){case"string":return Yr(e,t);case"object":if(e===null)throw new N(`Unexpected endpoint property: ${e}`);return rn(e,t);case"boolean":return e;default:throw new N(`Unexpected endpoint property type: ${typeof e}`)}},rn=(e,t)=>Object.entries(e).reduce((r,[n,s])=>({...r,[n]:tn(s,t)}),{}),Mo=(e,t)=>{const r=dt(e,"Endpoint URL",t);if(typeof r=="string")try{return new URL(r)}catch(n){throw console.error(`Failed to construct URL with ${r}`,n),n}throw new N(`Endpoint URL must be a string, got ${typeof r}`)},Do=(e,t)=>{var d,l;const{conditions:r,endpoint:n}=e,{result:s,referenceRecord:i}=Bt(r,t);if(!s)return;const o={...t,referenceRecord:{...t.referenceRecord,...i}},{url:a,properties:c,headers:u}=n;return(l=(d=t.logger)==null?void 0:d.debug)==null||l.call(d,ke,`Resolving endpoint from template: ${se(n)}`),{...u!=null&&{headers:To(u,o)},...c!=null&&{properties:rn(c,o)},url:Mo(a,o)}},Po=(e,t)=>{const{conditions:r,error:n}=e,{result:s,referenceRecord:i}=Bt(r,t);if(s)throw new N(dt(n,"Error",{...t,referenceRecord:{...t.referenceRecord,...i}}))},Bo=(e,t)=>{const{conditions:r,rules:n}=e,{result:s,referenceRecord:i}=Bt(r,t);if(s)return nn(n,{...t,referenceRecord:{...t.referenceRecord,...i}})},nn=(e,t)=>{for(const r of e)if(r.type==="endpoint"){const n=Do(r,t);if(n)return n}else if(r.type==="error")Po(r,t);else if(r.type==="tree"){const n=Bo(r,t);if(n)return n}else throw new N(`Unknown endpoint rule: ${r}`);throw new N("Rules evaluation failed")},sn=(e,t)=>{var u,d,l,f,h;const{endpointParams:r,logger:n}=t,{parameters:s,rules:i}=e;(d=(u=t.logger)==null?void 0:u.debug)==null||d.call(u,`${ke} Initial EndpointParams: ${se(r)}`);const o=Object.entries(s).filter(([,p])=>p.default!=null).map(([p,g])=>[p,g.default]);if(o.length>0)for(const[p,g]of o)r[p]=r[p]??g;const a=Object.entries(s).filter(([,p])=>p.required).map(([p])=>p);for(const p of a)if(r[p]==null)throw new N(`Missing required parameter: '${p}'`);const c=nn(i,{endpointParams:r,logger:n,referenceRecord:{}});if((l=t.endpointParams)!=null&&l.Endpoint)try{const p=new URL(t.endpointParams.Endpoint),{protocol:g,port:y}=p;c.url.protocol=g,c.url.port=y}catch{}return(h=(f=t.logger)==null?void 0:f.debug)==null||h.call(f,`${ke} Resolved endpoint: ${se(c)}`),c},on=(e,t=!1)=>{if(t){for(const r of e.split("."))if(!on(r))return!1;return!0}return!(!Dt(e)||e.length<3||e.length>63||e!==e.toLowerCase()||Qr(e))},ko=e=>{const t=e.split(":");if(t.length<6)return null;const[r,n,s,i,o,...a]=t;return r!=="arn"||n===""||s===""||a[0]===""?null:{partition:n,service:s,region:i,accountId:o,resourceId:a[0].includes("/")?a[0].split("/"):a}};let Io={partitions:[{id:"aws",outputs:{dnsSuffix:"amazonaws.com",dualStackDnsSuffix:"api.aws",implicitGlobalRegion:"us-east-1",name:"aws",supportsDualStack:!0,supportsFIPS:!0},regionRegex:"^(us|eu|ap|sa|ca|me|af|il)\\-\\w+\\-\\d+$",regions:{"af-south-1":{description:"Africa (Cape Town)"},"ap-east-1":{description:"Asia Pacific (Hong Kong)"},"ap-northeast-1":{description:"Asia Pacific (Tokyo)"},"ap-northeast-2":{description:"Asia Pacific (Seoul)"},"ap-northeast-3":{description:"Asia Pacific (Osaka)"},"ap-south-1":{description:"Asia Pacific (Mumbai)"},"ap-south-2":{description:"Asia Pacific (Hyderabad)"},"ap-southeast-1":{description:"Asia Pacific (Singapore)"},"ap-southeast-2":{description:"Asia Pacific (Sydney)"},"ap-southeast-3":{description:"Asia Pacific (Jakarta)"},"ap-southeast-4":{description:"Asia Pacific (Melbourne)"},"aws-global":{description:"AWS Standard global region"},"ca-central-1":{description:"Canada (Central)"},"ca-west-1":{description:"Canada West (Calgary)"},"eu-central-1":{description:"Europe (Frankfurt)"},"eu-central-2":{description:"Europe (Zurich)"},"eu-north-1":{description:"Europe (Stockholm)"},"eu-south-1":{description:"Europe (Milan)"},"eu-south-2":{description:"Europe (Spain)"},"eu-west-1":{description:"Europe (Ireland)"},"eu-west-2":{description:"Europe (London)"},"eu-west-3":{description:"Europe (Paris)"},"il-central-1":{description:"Israel (Tel Aviv)"},"me-central-1":{description:"Middle East (UAE)"},"me-south-1":{description:"Middle East (Bahrain)"},"sa-east-1":{description:"South America (Sao Paulo)"},"us-east-1":{description:"US East (N. Virginia)"},"us-east-2":{description:"US East (Ohio)"},"us-west-1":{description:"US West (N. California)"},"us-west-2":{description:"US West (Oregon)"}}},{id:"aws-cn",outputs:{dnsSuffix:"amazonaws.com.cn",dualStackDnsSuffix:"api.amazonwebservices.com.cn",implicitGlobalRegion:"cn-northwest-1",name:"aws-cn",supportsDualStack:!0,supportsFIPS:!0},regionRegex:"^cn\\-\\w+\\-\\d+$",regions:{"aws-cn-global":{description:"AWS China global region"},"cn-north-1":{description:"China (Beijing)"},"cn-northwest-1":{description:"China (Ningxia)"}}},{id:"aws-us-gov",outputs:{dnsSuffix:"amazonaws.com",dualStackDnsSuffix:"api.aws",implicitGlobalRegion:"us-gov-west-1",name:"aws-us-gov",supportsDualStack:!0,supportsFIPS:!0},regionRegex:"^us\\-gov\\-\\w+\\-\\d+$",regions:{"aws-us-gov-global":{description:"AWS GovCloud (US) global region"},"us-gov-east-1":{description:"AWS GovCloud (US-East)"},"us-gov-west-1":{description:"AWS GovCloud (US-West)"}}},{id:"aws-iso",outputs:{dnsSuffix:"c2s.ic.gov",dualStackDnsSuffix:"c2s.ic.gov",implicitGlobalRegion:"us-iso-east-1",name:"aws-iso",supportsDualStack:!1,supportsFIPS:!0},regionRegex:"^us\\-iso\\-\\w+\\-\\d+$",regions:{"aws-iso-global":{description:"AWS ISO (US) global region"},"us-iso-east-1":{description:"US ISO East"},"us-iso-west-1":{description:"US ISO WEST"}}},{id:"aws-iso-b",outputs:{dnsSuffix:"sc2s.sgov.gov",dualStackDnsSuffix:"sc2s.sgov.gov",implicitGlobalRegion:"us-isob-east-1",name:"aws-iso-b",supportsDualStack:!1,supportsFIPS:!0},regionRegex:"^us\\-isob\\-\\w+\\-\\d+$",regions:{"aws-iso-b-global":{description:"AWS ISOB (US) global region"},"us-isob-east-1":{description:"US ISOB East (Ohio)"}}},{id:"aws-iso-e",outputs:{dnsSuffix:"cloud.adc-e.uk",dualStackDnsSuffix:"cloud.adc-e.uk",implicitGlobalRegion:"eu-isoe-west-1",name:"aws-iso-e",supportsDualStack:!1,supportsFIPS:!0},regionRegex:"^eu\\-isoe\\-\\w+\\-\\d+$",regions:{}},{id:"aws-iso-f",outputs:{dnsSuffix:"csp.hci.ic.gov",dualStackDnsSuffix:"csp.hci.ic.gov",implicitGlobalRegion:"us-isof-south-1",name:"aws-iso-f",supportsDualStack:!1,supportsFIPS:!0},regionRegex:"^us\\-isof\\-\\w+\\-\\d+$",regions:{}}],version:"1.1"};const kt={isVirtualHostableS3Bucket:on,parseArn:ko,partition:e=>{const{partitions:t}=Io;for(const n of t){const{regions:s,outputs:i}=n;for(const[o,a]of Object.entries(s))if(o===e)return{...i,...a}}for(const n of t){const{regionRegex:s,outputs:i}=n;if(new RegExp(s).test(e))return{...i}}const r=t.find(n=>n.id==="aws");if(!r)throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");return{...r.outputs}}};Be.aws=kt;const an="user-agent",It="x-amz-user-agent",cn=" ",Ot="/",Oo=/[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g,$o=/[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g,un="-",Fo=e=>(t,r)=>async n=>{var l,f;const{request:s}=n;if(!V.isInstance(s))return t(n);const{headers:i}=s,o=((l=r==null?void 0:r.userAgent)==null?void 0:l.map($t))||[],a=(await e.defaultUserAgentProvider()).map($t),c=((f=e==null?void 0:e.customUserAgent)==null?void 0:f.map($t))||[],u=[].concat([...a,...o,...c]).join(cn),d=[...a.filter(h=>h.startsWith("aws-sdk-")),...c].join(cn);return e.runtime!=="browser"?(d&&(i[It]=i[It]?`${i[an]} ${d}`:d),i[an]=u):i[It]=u,t({...n,request:s})},$t=e=>{var o;const t=e[0].split(Ot).map(a=>a.replace(Oo,un)).join(Ot),r=(o=e[1])==null?void 0:o.replace($o,un),n=t.indexOf(Ot),s=t.substring(0,n);let i=t.substring(n+1);return s==="api"&&(i=i.toLowerCase()),[s,i,r].filter(a=>a&&a.length>0).reduce((a,c,u)=>{switch(u){case 0:return c;case 1:return`${a}/${c}`;default:return`${a}#${c}`}},"")},No={name:"getUserAgentMiddleware",step:"build",priority:"low",tags:["SET_USER_AGENT","USER_AGENT"],override:!0},dn=e=>({applyToStack:t=>{t.add(Fo(e),No)}});var ln;(function(e){e.ENV="env",e.CONFIG="shared config entry"})(ln||(ln={}));const fn=!1,hn=!1,Ie=e=>e[Mt]||(e[Mt]={}),te=e=>{if(typeof e=="function")return e;const t=Promise.resolve(e);return()=>t},pn=e=>typeof e=="string"&&(e.startsWith("fips-")||e.endsWith("-fips")),mn=e=>pn(e)?["fips-aws-global","aws-fips"].includes(e)?"us-east-1":e.replace(/fips-(dkr-|prod-)?|-fips/,""):e,gn=e=>{const{region:t,useFipsEndpoint:r}=e;if(!t)throw new Error("Region is missing");return{...e,region:async()=>{if(typeof t=="string")return mn(t);const n=await t();return mn(n)},useFipsEndpoint:async()=>{const n=typeof t=="string"?t:await t();return pn(n)?!0:typeof r!="function"?Promise.resolve(!!r):r()}}};function Lo(e){const t=new Map;for(const r of e)t.set(r.schemeId,r);return t}const Uo=(e,t)=>(r,n)=>async s=>{var u;const i=e.httpAuthSchemeProvider(await t.httpAuthSchemeParametersProvider(e,n,s.input)),o=Lo(e.httpAuthSchemes),a=Ie(n),c=[];for(const d of i){const l=o.get(d.schemeId);if(!l){c.push(`HttpAuthScheme \`${d.schemeId}\` was not enabled for this service.`);continue}const f=l.identityProvider(await t.identityProviderConfigProvider(e));if(!f){c.push(`HttpAuthScheme \`${d.schemeId}\` did not have an IdentityProvider configured.`);continue}const{identityProperties:h={},signingProperties:p={}}=((u=d.propertiesExtractor)==null?void 0:u.call(d,e,n))||{};d.identityProperties=Object.assign(d.identityProperties||{},h),d.signingProperties=Object.assign(d.signingProperties||{},p),a.selectedHttpAuthScheme={httpAuthOption:d,identity:await f(d.identityProperties),signer:l.signer};break}if(!a.selectedHttpAuthScheme)throw new Error(c.join(`
`));return r(s)},jo=async e=>{const t=(e==null?void 0:e.Bucket)||"";if(typeof e.Bucket=="string"&&(e.Bucket=t.replace(/#/g,encodeURIComponent("#")).replace(/\?/g,encodeURIComponent("?"))),Go(t)){if(e.ForcePathStyle===!0)throw new Error("Path-style addressing cannot be used with ARN buckets")}else(!Wo(t)||t.indexOf(".")!==-1&&!String(e.Endpoint).startsWith("http:")||t.toLowerCase()!==t||t.length<3)&&(e.ForcePathStyle=!0);return e.DisableMultiRegionAccessPoints&&(e.disableMultiRegionAccessPoints=!0,e.DisableMRAP=!0),e},Ho=/^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/,zo=/(\d+\.){3}\d+/,qo=/\.\./,Wo=e=>Ho.test(e)&&!zo.test(e)&&!qo.test(e),Go=e=>{const[t,r,n,,,s]=e.split(":"),i=t==="arn"&&e.split(":").length>=6,o=!!(i&&r&&n&&s);if(i&&!o)throw new Error(`Invalid ARN: ${e} was an invalid ARN.`);return o},Vo=(e,t,r)=>{const n=async()=>{const s=r[e]??r[t];return typeof s=="function"?s():s};return e==="credentialScope"||t==="CredentialScope"?async()=>{const s=typeof r.credentials=="function"?await r.credentials():r.credentials;return(s==null?void 0:s.credentialScope)??(s==null?void 0:s.CredentialScope)}:e==="endpoint"||t==="endpoint"?async()=>{const s=await n();if(s&&typeof s=="object"){if("url"in s)return s.url.href;if("hostname"in s){const{protocol:i,hostname:o,port:a,path:c}=s;return`${i}//${o}${a?":"+a:""}${c}`}}return s}:n},Ko=async e=>{};function Zo(e){const t={};if(e=e.replace(/^\?/,""),e)for(const r of e.split("&")){let[n,s=null]=r.split("=");n=decodeURIComponent(n),s&&(s=decodeURIComponent(s)),n in t?Array.isArray(t[n])?t[n].push(s):t[n]=[t[n],s]:t[n]=s}return t}const Oe=e=>{if(typeof e=="string")return Oe(new URL(e));const{hostname:t,pathname:r,port:n,protocol:s,search:i}=e;let o;return i&&(o=Zo(i)),{hostname:t,port:n?parseInt(n):void 0,protocol:s,path:r,query:o}},yn=e=>typeof e=="object"?"url"in e?Oe(e.url):e:Oe(e),Xo=async(e,t,r,n)=>{if(!r.endpoint){const o=await Ko(r.serviceId||"");o&&(r.endpoint=()=>Promise.resolve(yn(o)))}const s=await Qo(e,t,r);if(typeof r.endpointProvider!="function")throw new Error("config.endpointProvider is not set.");return r.endpointProvider(s,n)},Qo=async(e,t,r)=>{var i;const n={},s=((i=t==null?void 0:t.getEndpointParameterInstructions)==null?void 0:i.call(t))||{};for(const[o,a]of Object.entries(s))switch(a.type){case"staticContextParams":n[o]=a.value;break;case"contextParams":n[o]=e[a.name];break;case"clientContextParams":case"builtInParams":n[o]=await Vo(a.name,o,r)();break;default:throw new Error("Unrecognized endpoint parameter instruction: "+JSON.stringify(a))}return Object.keys(s).length===0&&Object.assign(n,r),String(r.serviceId).toLowerCase()==="s3"&&await jo(n),n},Jo=({config:e,instructions:t})=>(r,n)=>async s=>{var a,c,u;const i=await Xo(s.input,{getEndpointParameterInstructions(){return t}},{...e},n);n.endpointV2=i,n.authSchemes=(a=i.properties)==null?void 0:a.authSchemes;const o=(c=n.authSchemes)==null?void 0:c[0];if(o){n.signing_region=o.signingRegion,n.signing_service=o.signingName;const d=Ie(n),l=(u=d==null?void 0:d.selectedHttpAuthScheme)==null?void 0:u.httpAuthOption;l&&(l.signingProperties=Object.assign(l.signingProperties||{},{signing_region:o.signingRegion,signingRegion:o.signingRegion,signing_service:o.signingName,signingName:o.signingName,signingRegionSet:o.signingRegionSet},o.properties))}return r({...s})},Yo=(e,t)=>(r,n)=>async s=>{const{response:i}=await r(s);try{const o=await t(i,e);return{response:i,output:o}}catch(o){if(Object.defineProperty(o,"$response",{value:i}),!("$metadata"in o)){const a="Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.";o.message+=`
  `+a,typeof o.$responseBodyText<"u"&&o.$response&&(o.$response.body=o.$responseBodyText)}throw o}},ea=(e,t)=>(r,n)=>async s=>{var a;const i=(a=n.endpointV2)!=null&&a.url&&e.urlParser?async()=>e.urlParser(n.endpointV2.url):e.endpoint;if(!i)throw new Error("No valid endpoint provider available.");const o=await t(s.input,{...e,endpoint:i});return r({...s,request:o})},ta={name:"deserializerMiddleware",step:"deserialize",tags:["DESERIALIZER"],override:!0},Ft={name:"serializerMiddleware",step:"serialize",tags:["SERIALIZER"],override:!0};function ra(e,t,r){return{applyToStack:n=>{n.add(Yo(e,r),ta),n.add(ea(e,t),Ft)}}}const wn={step:"serialize",tags:["ENDPOINT_PARAMETERS","ENDPOINT_V2","ENDPOINT"],name:"endpointV2Middleware",override:!0,relation:"before",toMiddleware:Ft.name},na=(e,t)=>({applyToStack:r=>{r.addRelativeTo(Jo({config:e,instructions:t}),wn)}}),bn=e=>{const t=e.tls??!0,{endpoint:r}=e,n=r!=null?async()=>yn(await te(r)()):void 0;return{...e,endpoint:n,tls:t,isCustomEndpoint:!!r,useDualstackEndpoint:te(e.useDualstackEndpoint??!1),useFipsEndpoint:te(e.useFipsEndpoint??!1)}},sa={step:"serialize",tags:["HTTP_AUTH_SCHEME"],name:"httpAuthSchemeMiddleware",override:!0,relation:"before",toMiddleware:wn.name},vn=(e,{httpAuthSchemeParametersProvider:t,identityProviderConfigProvider:r})=>({applyToStack:n=>{n.addRelativeTo(Uo(e,{httpAuthSchemeParametersProvider:t,identityProviderConfigProvider:r}),sa)}});Ft.name;const ia=e=>t=>{throw t},oa=(e,t)=>{},aa=e=>(t,r)=>async n=>{if(!V.isInstance(n.request))return t(n);const i=Ie(r).selectedHttpAuthScheme;if(!i)throw new Error("No HttpAuthScheme was selected: unable to sign request");const{httpAuthOption:{signingProperties:o={}},identity:a,signer:c}=i,u=await t({...n,request:await c.sign(n.request,a,o)}).catch((c.errorHandler||ia)(o));return(c.successHandler||oa)(u.response,o),u};var Ae;(function(e){e.STANDARD="standard",e.ADAPTIVE="adaptive"})(Ae||(Ae={}));const $e=3,An=Ae.STANDARD,ca=["BandwidthLimitExceeded","EC2ThrottledException","LimitExceededException","PriorRequestNotComplete","ProvisionedThroughputExceededException","RequestLimitExceeded","RequestThrottled","RequestThrottledException","SlowDown","ThrottledException","Throttling","ThrottlingException","TooManyRequestsException","TransactionInProgressException"],ua=["TimeoutError","RequestTimeout","RequestTimeoutException"],da=[500,502,503,504],la=["ECONNRESET","ECONNREFUSED","EPIPE","ETIMEDOUT"],fa=e=>{var t;return(t=e.$metadata)==null?void 0:t.clockSkewCorrected},xn=e=>{var t,r;return((t=e.$metadata)==null?void 0:t.httpStatusCode)===429||ca.includes(e.name)||((r=e.$retryable)==null?void 0:r.throttling)==!0},Sn=e=>{var t;return fa(e)||ua.includes(e.name)||la.includes((e==null?void 0:e.code)||"")||da.includes(((t=e.$metadata)==null?void 0:t.httpStatusCode)||0)},ha=e=>{var t;if(((t=e.$metadata)==null?void 0:t.httpStatusCode)!==void 0){const r=e.$metadata.httpStatusCode;return 500<=r&&r<=599&&!Sn(e)}return!1};class pa{constructor(t){this.currentCapacity=0,this.enabled=!1,this.lastMaxRate=0,this.measuredTxRate=0,this.requestCount=0,this.lastTimestamp=0,this.timeWindow=0,this.beta=(t==null?void 0:t.beta)??.7,this.minCapacity=(t==null?void 0:t.minCapacity)??1,this.minFillRate=(t==null?void 0:t.minFillRate)??.5,this.scaleConstant=(t==null?void 0:t.scaleConstant)??.4,this.smooth=(t==null?void 0:t.smooth)??.8;const r=this.getCurrentTimeInSeconds();this.lastThrottleTime=r,this.lastTxRateBucket=Math.floor(this.getCurrentTimeInSeconds()),this.fillRate=this.minFillRate,this.maxCapacity=this.minCapacity}getCurrentTimeInSeconds(){return Date.now()/1e3}async getSendToken(){return this.acquireTokenBucket(1)}async acquireTokenBucket(t){if(this.enabled){if(this.refillTokenBucket(),t>this.currentCapacity){const r=(t-this.currentCapacity)/this.fillRate*1e3;await new Promise(n=>setTimeout(n,r))}this.currentCapacity=this.currentCapacity-t}}refillTokenBucket(){const t=this.getCurrentTimeInSeconds();if(!this.lastTimestamp){this.lastTimestamp=t;return}const r=(t-this.lastTimestamp)*this.fillRate;this.currentCapacity=Math.min(this.maxCapacity,this.currentCapacity+r),this.lastTimestamp=t}updateClientSendingRate(t){let r;if(this.updateMeasuredRate(),xn(t)){const s=this.enabled?Math.min(this.measuredTxRate,this.fillRate):this.measuredTxRate;this.lastMaxRate=s,this.calculateTimeWindow(),this.lastThrottleTime=this.getCurrentTimeInSeconds(),r=this.cubicThrottle(s),this.enableTokenBucket()}else this.calculateTimeWindow(),r=this.cubicSuccess(this.getCurrentTimeInSeconds());const n=Math.min(r,2*this.measuredTxRate);this.updateTokenBucketRate(n)}calculateTimeWindow(){this.timeWindow=this.getPrecise(Math.pow(this.lastMaxRate*(1-this.beta)/this.scaleConstant,1/3))}cubicThrottle(t){return this.getPrecise(t*this.beta)}cubicSuccess(t){return this.getPrecise(this.scaleConstant*Math.pow(t-this.lastThrottleTime-this.timeWindow,3)+this.lastMaxRate)}enableTokenBucket(){this.enabled=!0}updateTokenBucketRate(t){this.refillTokenBucket(),this.fillRate=Math.max(t,this.minFillRate),this.maxCapacity=Math.max(t,this.minCapacity),this.currentCapacity=Math.min(this.currentCapacity,this.maxCapacity)}updateMeasuredRate(){const t=this.getCurrentTimeInSeconds(),r=Math.floor(t*2)/2;if(this.requestCount++,r>this.lastTxRateBucket){const n=this.requestCount/(r-this.lastTxRateBucket);this.measuredTxRate=this.getPrecise(n*this.smooth+this.measuredTxRate*(1-this.smooth)),this.requestCount=0,this.lastTxRateBucket=r}}getPrecise(t){return parseFloat(t.toFixed(8))}}const Nt=100,En=20*1e3,ma=500,Cn=500,ga=5,ya=10,wa=1,ba="amz-sdk-invocation-id",va="amz-sdk-request",Aa=()=>{let e=Nt;return{computeNextBackoffDelay:n=>Math.floor(Math.min(En,Math.random()*2**n*e)),setDelayBase:n=>{e=n}}},_n=({retryDelay:e,retryCount:t,retryCost:r})=>({getRetryCount:()=>t,getRetryDelay:()=>Math.min(En,e),getRetryCost:()=>r});class Rn{constructor(t){this.maxAttempts=t,this.mode=Ae.STANDARD,this.capacity=Cn,this.retryBackoffStrategy=Aa(),this.maxAttemptsProvider=typeof t=="function"?t:async()=>t}async acquireInitialRetryToken(t){return _n({retryDelay:Nt,retryCount:0})}async refreshRetryTokenForRetry(t,r){const n=await this.getMaxAttempts();if(this.shouldRetry(t,r,n)){const s=r.errorType;this.retryBackoffStrategy.setDelayBase(s==="THROTTLING"?ma:Nt);const i=this.retryBackoffStrategy.computeNextBackoffDelay(t.getRetryCount()),o=r.retryAfterHint?Math.max(r.retryAfterHint.getTime()-Date.now()||0,i):i,a=this.getCapacityCost(s);return this.capacity-=a,_n({retryDelay:o,retryCount:t.getRetryCount()+1,retryCost:a})}throw new Error("No retry token available")}recordSuccess(t){this.capacity=Math.max(Cn,this.capacity+(t.getRetryCost()??wa))}getCapacity(){return this.capacity}async getMaxAttempts(){try{return await this.maxAttemptsProvider()}catch{return console.warn(`Max attempts provider could not resolve. Using default of ${$e}`),$e}}shouldRetry(t,r,n){return t.getRetryCount()+1<n&&this.capacity>=this.getCapacityCost(r.errorType)&&this.isRetryableError(r.errorType)}getCapacityCost(t){return t==="TRANSIENT"?ya:ga}isRetryableError(t){return t==="THROTTLING"||t==="TRANSIENT"}}class xa{constructor(t,r){this.maxAttemptsProvider=t,this.mode=Ae.ADAPTIVE;const{rateLimiter:n}=r??{};this.rateLimiter=n??new pa,this.standardRetryStrategy=new Rn(t)}async acquireInitialRetryToken(t){return await this.rateLimiter.getSendToken(),this.standardRetryStrategy.acquireInitialRetryToken(t)}async refreshRetryTokenForRetry(t,r){return this.rateLimiter.updateClientSendingRate(r),this.standardRetryStrategy.refreshRetryTokenForRetry(t,r)}recordSuccess(t){this.rateLimiter.updateClientSendingRate({}),this.standardRetryStrategy.recordSuccess(t)}}let lt;const Sa=new Uint8Array(16);function Ea(){if(!lt&&(lt=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!lt))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return lt(Sa)}const P=[];for(let e=0;e<256;++e)P.push((e+256).toString(16).slice(1));function Ca(e,t=0){return P[e[t+0]]+P[e[t+1]]+P[e[t+2]]+P[e[t+3]]+"-"+P[e[t+4]]+P[e[t+5]]+"-"+P[e[t+6]]+P[e[t+7]]+"-"+P[e[t+8]]+P[e[t+9]]+"-"+P[e[t+10]]+P[e[t+11]]+P[e[t+12]]+P[e[t+13]]+P[e[t+14]]+P[e[t+15]]}const Tn={randomUUID:typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};function _a(e,t,r){if(Tn.randomUUID&&!t&&!e)return Tn.randomUUID();e=e||{};const n=e.random||(e.rng||Ea)();if(n[6]=n[6]&15|64,n[8]=n[8]&63|128,t){r=r||0;for(let s=0;s<16;++s)t[r+s]=n[s];return t}return Ca(n)}const Ra=e=>e instanceof Error?e:e instanceof Object?Object.assign(new Error,e):typeof e=="string"?new Error(e):new Error(`AWS SDK error wrapper for ${e}`),Mn=e=>{const{retryStrategy:t}=e,r=te(e.maxAttempts??$e);return{...e,maxAttempts:r,retryStrategy:async()=>t||(await te(e.retryMode)()===Ae.ADAPTIVE?new xa(r):new Rn(r))}};class Lt{trace(){}debug(){}info(){}warn(){}error(){}}const fe=(e,t)=>{const r=[];if(e&&r.push(e),t)for(const n of t)r.push(n);return r},ie=(e,t)=>`${e||"anonymous"}${t&&t.length>0?` (a.k.a. ${t.join(",")})`:""}`,ft=()=>{let e=[],t=[],r=!1;const n=new Set,s=l=>l.sort((f,h)=>Dn[h.step]-Dn[f.step]||Pn[h.priority||"normal"]-Pn[f.priority||"normal"]),i=l=>{let f=!1;const h=p=>{const g=fe(p.name,p.aliases);if(g.includes(l)){f=!0;for(const y of g)n.delete(y);return!1}return!0};return e=e.filter(h),t=t.filter(h),f},o=l=>{let f=!1;const h=p=>{if(p.middleware===l){f=!0;for(const g of fe(p.name,p.aliases))n.delete(g);return!1}return!0};return e=e.filter(h),t=t.filter(h),f},a=l=>{var f;return e.forEach(h=>{l.add(h.middleware,{...h})}),t.forEach(h=>{l.addRelativeTo(h.middleware,{...h})}),(f=l.identifyOnResolve)==null||f.call(l,d.identifyOnResolve()),l},c=l=>{const f=[];return l.before.forEach(h=>{h.before.length===0&&h.after.length===0?f.push(h):f.push(...c(h))}),f.push(l),l.after.reverse().forEach(h=>{h.before.length===0&&h.after.length===0?f.push(h):f.push(...c(h))}),f},u=(l=!1)=>{const f=[],h=[],p={};return e.forEach(y=>{const v={...y,before:[],after:[]};for(const S of fe(v.name,v.aliases))p[S]=v;f.push(v)}),t.forEach(y=>{const v={...y,before:[],after:[]};for(const S of fe(v.name,v.aliases))p[S]=v;h.push(v)}),h.forEach(y=>{if(y.toMiddleware){const v=p[y.toMiddleware];if(v===void 0){if(l)return;throw new Error(`${y.toMiddleware} is not found when adding ${ie(y.name,y.aliases)} middleware ${y.relation} ${y.toMiddleware}`)}y.relation==="after"&&v.after.push(y),y.relation==="before"&&v.before.push(y)}}),s(f).map(c).reduce((y,v)=>(y.push(...v),y),[])},d={add:(l,f={})=>{const{name:h,override:p,aliases:g}=f,y={step:"initialize",priority:"normal",middleware:l,...f},v=fe(h,g);if(v.length>0){if(v.some(S=>n.has(S))){if(!p)throw new Error(`Duplicate middleware name '${ie(h,g)}'`);for(const S of v){const _=e.findIndex(le=>{var ye;return le.name===S||((ye=le.aliases)==null?void 0:ye.some(we=>we===S))});if(_===-1)continue;const F=e[_];if(F.step!==y.step||y.priority!==F.priority)throw new Error(`"${ie(F.name,F.aliases)}" middleware with ${F.priority} priority in ${F.step} step cannot be overridden by "${ie(h,g)}" middleware with ${y.priority} priority in ${y.step} step.`);e.splice(_,1)}}for(const S of v)n.add(S)}e.push(y)},addRelativeTo:(l,f)=>{const{name:h,override:p,aliases:g}=f,y={middleware:l,...f},v=fe(h,g);if(v.length>0){if(v.some(S=>n.has(S))){if(!p)throw new Error(`Duplicate middleware name '${ie(h,g)}'`);for(const S of v){const _=t.findIndex(le=>{var ye;return le.name===S||((ye=le.aliases)==null?void 0:ye.some(we=>we===S))});if(_===-1)continue;const F=t[_];if(F.toMiddleware!==y.toMiddleware||F.relation!==y.relation)throw new Error(`"${ie(F.name,F.aliases)}" middleware ${F.relation} "${F.toMiddleware}" middleware cannot be overridden by "${ie(h,g)}" middleware ${y.relation} "${y.toMiddleware}" middleware.`);t.splice(_,1)}}for(const S of v)n.add(S)}t.push(y)},clone:()=>a(ft()),use:l=>{l.applyToStack(d)},remove:l=>typeof l=="string"?i(l):o(l),removeByTag:l=>{let f=!1;const h=p=>{const{tags:g,name:y,aliases:v}=p;if(g&&g.includes(l)){const S=fe(y,v);for(const _ of S)n.delete(_);return f=!0,!1}return!0};return e=e.filter(h),t=t.filter(h),f},concat:l=>{var h;const f=a(ft());return f.use(l),f.identifyOnResolve(r||f.identifyOnResolve()||(((h=l.identifyOnResolve)==null?void 0:h.call(l))??!1)),f},applyToStack:a,identify:()=>u(!0).map(l=>{const f=l.step??l.relation+" "+l.toMiddleware;return ie(l.name,l.aliases)+" - "+f}),identifyOnResolve(l){return typeof l=="boolean"&&(r=l),r},resolve:(l,f)=>{for(const h of u().map(p=>p.middleware).reverse())l=h(l,f);return r&&console.log(d.identify()),l}};return d},Dn={initialize:5,serialize:4,build:3,finalizeRequest:2,deserialize:1},Pn={high:3,normal:2,low:1};class Bn{constructor(t){this.middlewareStack=ft(),this.config=t}send(t,r,n){const s=typeof r!="function"?r:void 0,i=typeof r=="function"?r:n,o=t.resolveMiddleware(this.middlewareStack,this.config,s);if(i)o(t).then(a=>i(null,a.output),a=>i(a)).catch(()=>{});else return o(t).then(a=>a.output)}destroy(){this.config.requestHandler.destroy&&this.config.requestHandler.destroy()}}const oe={},xe=new Array(64);for(let e=0,t="A".charCodeAt(0),r="Z".charCodeAt(0);e+t<=r;e++){const n=String.fromCharCode(e+t);oe[n]=e,xe[e]=n}for(let e=0,t="a".charCodeAt(0),r="z".charCodeAt(0);e+t<=r;e++){const n=String.fromCharCode(e+t),s=e+26;oe[n]=s,xe[s]=n}for(let e=0;e<10;e++){oe[e.toString(10)]=e+52;const t=e.toString(10),r=e+52;oe[t]=r,xe[r]=t}oe["+"]=62,xe[62]="+",oe["/"]=63,xe[63]="/";const Se=6,Fe=8,Ta=63,ht=e=>{let t=e.length/4*3;e.slice(-2)==="=="?t-=2:e.slice(-1)==="="&&t--;const r=new ArrayBuffer(t),n=new DataView(r);for(let s=0;s<e.length;s+=4){let i=0,o=0;for(let u=s,d=s+3;u<=d;u++)if(e[u]!=="="){if(!(e[u]in oe))throw new TypeError(`Invalid character ${e[u]} in base64 string.`);i|=oe[e[u]]<<(d-u)*Se,o+=Se}else i>>=Se;const a=s/4*3;i>>=o%Fe;const c=Math.floor(o/Fe);for(let u=0;u<c;u++){const d=(c-u-1)*Fe;n.setUint8(a+u,(i&255<<d)>>d)}}return new Uint8Array(r)},he=e=>new TextEncoder().encode(e),Ne=e=>typeof e=="string"?he(e):ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength/Uint8Array.BYTES_PER_ELEMENT):new Uint8Array(e),Ut=e=>{if(typeof e=="string")return e;if(typeof e!="object"||typeof e.byteOffset!="number"||typeof e.byteLength!="number")throw new Error("@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.");return new TextDecoder("utf-8").decode(e)};function jt(e){let t;typeof e=="string"?t=he(e):t=e;const r=typeof t=="object"&&typeof t.length=="number",n=typeof t=="object"&&typeof t.byteOffset=="number"&&typeof t.byteLength=="number";if(!r&&!n)throw new Error("@smithy/util-base64: toBase64 encoder function only accepts string | Uint8Array.");let s="";for(let i=0;i<t.length;i+=3){let o=0,a=0;for(let u=i,d=Math.min(i+3,t.length);u<d;u++)o|=t[u]<<(d-u-1)*Fe,a+=Fe;const c=Math.ceil(a/Se);o<<=c*Se-a;for(let u=1;u<=c;u++){const d=(c-u)*Se;s+=xe[(o&Ta<<d)>>d]}s+="==".slice(0,4-c)}return s}function Ma(e,t="utf-8"){return t==="base64"?jt(e):Ut(e)}function Da(e,t){return t==="base64"?pe.mutate(ht(e)):pe.mutate(he(e))}class pe extends Uint8Array{static fromString(t,r="utf-8"){switch(typeof t){case"string":return Da(t,r);default:throw new Error(`Unsupported conversion from ${typeof t} to Uint8ArrayBlobAdapter.`)}}static mutate(t){return Object.setPrototypeOf(t,pe.prototype),t}transformToString(t="utf-8"){return Ma(this,t)}}const ae=e=>encodeURIComponent(e).replace(/[!'()*]/g,Pa),Pa=e=>`%${e.charCodeAt(0).toString(16).toUpperCase()}`;function Ba(e){const t=[];for(let r of Object.keys(e).sort()){const n=e[r];if(r=ae(r),Array.isArray(n))for(let s=0,i=n.length;s<i;s++)t.push(`${r}=${ae(n[s])}`);else{let s=r;(n||typeof n=="string")&&(s+=`=${ae(n)}`),t.push(s)}}return t.join("&")}function ka(e=0){return new Promise((t,r)=>{e&&setTimeout(()=>{const n=new Error(`Request did not complete within ${e} ms`);n.name="TimeoutError",r(n)},e)})}const Ia={supported:typeof Request<"u"&&"keepalive"in new Request("https://[::1]")};class pt{static create(t){return typeof(t==null?void 0:t.handle)=="function"?t:new pt(t)}constructor(t){typeof t=="function"?this.configProvider=t().then(r=>r||{}):(this.config=t??{},this.configProvider=Promise.resolve(this.config))}destroy(){}async handle(t,{abortSignal:r}={}){this.config||(this.config=await this.configProvider);const n=this.config.requestTimeout,s=this.config.keepAlive===!0;if(r!=null&&r.aborted){const g=new Error("Request aborted");return g.name="AbortError",Promise.reject(g)}let i=t.path;const o=Ba(t.query||{});o&&(i+=`?${o}`),t.fragment&&(i+=`#${t.fragment}`);let a="";if(t.username!=null||t.password!=null){const g=t.username??"",y=t.password??"";a=`${g}:${y}@`}const{port:c,method:u}=t,d=`${t.protocol}//${a}${t.hostname}${c?`:${c}`:""}${i}`,f={body:u==="GET"||u==="HEAD"?void 0:t.body,headers:new Headers(t.headers),method:u};typeof AbortController<"u"&&(f.signal=r),Ia.supported&&(f.keepalive=s);const h=new Request(d,f),p=[fetch(h).then(g=>{const y=g.headers,v={};for(const _ of y.entries())v[_[0]]=_[1];return g.body!=null?{response:new ut({headers:v,reason:g.statusText,statusCode:g.status,body:g.body})}:g.blob().then(_=>({response:new ut({headers:v,reason:g.statusText,statusCode:g.status,body:_})}))}),ka(n)];return r&&p.push(new Promise((g,y)=>{r.onabort=()=>{const v=new Error("Request aborted");v.name="AbortError",y(v)}})),Promise.race(p)}updateHttpClientConfig(t,r){this.config=void 0,this.configProvider=this.configProvider.then(n=>(n[t]=r,n))}httpHandlerConfigs(){return this.config??{}}}const kn=e=>typeof Blob=="function"&&e instanceof Blob?Oa(e):$a(e);async function Oa(e){const t=await Fa(e),r=ht(t);return new Uint8Array(r)}async function $a(e){let t=new Uint8Array(0);const r=e.getReader();let n=!1;for(;!n;){const{done:s,value:i}=await r.read();if(i){const o=t;t=new Uint8Array(o.length+i.length),t.set(o),t.set(i,o.length)}n=s}return t}function Fa(e){return new Promise((t,r)=>{const n=new FileReader;n.onloadend=()=>{if(n.readyState!==2)return r(new Error("Reader aborted too early"));const s=n.result??"",i=s.indexOf(","),o=i>-1?i+1:s.length;t(s.substring(o))},n.onabort=()=>r(new Error("Read aborted")),n.onerror=()=>r(n.error),n.readAsDataURL(e)})}const In={},Ht={};for(let e=0;e<256;e++){let t=e.toString(16).toLowerCase();t.length===1&&(t=`0${t}`),In[e]=t,Ht[t]=e}function On(e){if(e.length%2!==0)throw new Error("Hex encoded strings must have an even number length");const t=new Uint8Array(e.length/2);for(let r=0;r<e.length;r+=2){const n=e.slice(r,r+2).toLowerCase();if(n in Ht)t[r/2]=Ht[n];else throw new Error(`Cannot decode unrecognized sequence ${n} as hexadecimal`)}return t}function L(e){let t="";for(let r=0;r<e.byteLength;r++)t+=In[e[r]];return t}const Na=async(e=new Uint8Array,t)=>{if(e instanceof Uint8Array)return pe.mutate(e);if(!e)return pe.mutate(new Uint8Array);const r=t.streamCollector(e);return pe.mutate(await r)};class $n{constructor(){this.middlewareStack=ft()}static classBuilder(){return new La}resolveMiddlewareWithContext(t,r,n,{middlewareFn:s,clientName:i,commandName:o,inputFilterSensitiveLog:a,outputFilterSensitiveLog:c,smithyContext:u,additionalContext:d,CommandCtor:l}){for(const y of s.bind(this)(l,t,r,n))this.middlewareStack.use(y);const f=t.concat(this.middlewareStack),{logger:h}=r,p={logger:h,clientName:i,commandName:o,inputFilterSensitiveLog:a,outputFilterSensitiveLog:c,[Mt]:{...u},...d},{requestHandler:g}=r;return f.resolve(y=>g.handle(y.request,n||{}),p)}}class La{constructor(){this._init=()=>{},this._ep={},this._middlewareFn=()=>[],this._commandName="",this._clientName="",this._additionalContext={},this._smithyContext={},this._inputFilterSensitiveLog=t=>t,this._outputFilterSensitiveLog=t=>t,this._serializer=null,this._deserializer=null}init(t){this._init=t}ep(t){return this._ep=t,this}m(t){return this._middlewareFn=t,this}s(t,r,n={}){return this._smithyContext={service:t,operation:r,...n},this}c(t={}){return this._additionalContext=t,this}n(t,r){return this._clientName=t,this._commandName=r,this}f(t=n=>n,r=n=>n){return this._inputFilterSensitiveLog=t,this._outputFilterSensitiveLog=r,this}ser(t){return this._serializer=t,this}de(t){return this._deserializer=t,this}build(){const t=this;let r;return r=class extends $n{static getEndpointParameterInstructions(){return t._ep}constructor(...[n]){super(),this.serialize=t._serializer,this.deserialize=t._deserializer,this.input=n??{},t._init(this)}resolveMiddleware(n,s,i){return this.resolveMiddlewareWithContext(n,s,i,{CommandCtor:r,middlewareFn:t._middlewareFn,clientName:t._clientName,commandName:t._commandName,inputFilterSensitiveLog:t._inputFilterSensitiveLog,outputFilterSensitiveLog:t._outputFilterSensitiveLog,smithyContext:t._smithyContext,additionalContext:t._additionalContext})}}}}class zt extends Error{constructor(t){super(t.message),Object.setPrototypeOf(this,zt.prototype),this.name=t.name,this.$fault=t.$fault,this.$metadata=t.$metadata}}const k=(e,t={})=>{Object.entries(t).filter(([,n])=>n!==void 0).forEach(([n,s])=>{(e[n]==null||e[n]==="")&&(e[n]=s)});const r=e.message||e.Message||"UnknownError";return e.message=r,delete e.Message,e},Ua=({output:e,parsedBody:t,exceptionCtor:r,errorCode:n})=>{const s=Ha(e),i=s.httpStatusCode?s.httpStatusCode+"":void 0,o=new r({name:(t==null?void 0:t.code)||(t==null?void 0:t.Code)||n||i||"UnknownError",$fault:"client",$metadata:s});throw k(o,t)},ja=e=>({output:t,parsedBody:r,errorCode:n})=>{Ua({output:t,parsedBody:r,exceptionCtor:e,errorCode:n})},Ha=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),Fn=e=>{switch(e){case"standard":return{retryMode:"standard",connectionTimeout:3100};case"in-region":return{retryMode:"standard",connectionTimeout:1100};case"cross-region":return{retryMode:"standard",connectionTimeout:3100};case"mobile":return{retryMode:"standard",connectionTimeout:3e4};default:return{}}},za=e=>{const t=[];for(const r in ct){const n=ct[r];e[n]!==void 0&&t.push({algorithmId:()=>n,checksumConstructor:()=>e[n]})}return{_checksumAlgorithms:t,addChecksumAlgorithm(r){this._checksumAlgorithms.push(r)},checksumAlgorithms(){return this._checksumAlgorithms}}},qa=e=>{const t={};return e.checksumAlgorithms().forEach(r=>{t[r.algorithmId()]=r.checksumConstructor()}),t},Wa=e=>{let t=e.retryStrategy;return{setRetryStrategy(r){t=r},retryStrategy(){return t}}},Ga=e=>{const t={};return t.retryStrategy=e.retryStrategy(),t},Nn=e=>({...za(e),...Wa(e)}),Ln=e=>({...qa(e),...Ga(e)}),qt=function(){const e=Object.getPrototypeOf(this).constructor,t=Function.bind.apply(String,[null,...arguments]),r=new t;return Object.setPrototypeOf(r,e.prototype),r};qt.prototype=Object.create(String.prototype,{constructor:{value:qt,enumerable:!1,writable:!0,configurable:!0}}),Object.setPrototypeOf(qt,String);const T=e=>{if(e==null)return{};if(Array.isArray(e))return e.filter(t=>t!=null).map(T);if(typeof e=="object"){const t={};for(const r of Object.keys(e))e[r]!=null&&(t[r]=T(e[r]));return t}return e},Va=e=>(e==null?void 0:e.body)instanceof ReadableStream,Ka=e=>(t,r)=>async n=>{var o;let s=await e.retryStrategy();const i=await e.maxAttempts();if(Za(s)){s=s;let a=await s.acquireInitialRetryToken(r.partition_id),c=new Error,u=0,d=0;const{request:l}=n,f=V.isInstance(l);for(f&&(l.headers[ba]=_a());;)try{f&&(l.headers[va]=`attempt=${u+1}; max=${i}`);const{response:h,output:p}=await t(n);return s.recordSuccess(a),p.$metadata.attempts=u+1,p.$metadata.totalRetryDelay=d,{response:h,output:p}}catch(h){const p=Xa(h);if(c=Ra(h),f&&Va(l))throw(o=r.logger instanceof Lt?console:r.logger)==null||o.warn("An error was encountered in a non-retryable streaming request."),c;try{a=await s.refreshRetryTokenForRetry(a,p)}catch{throw c.$metadata||(c.$metadata={}),c.$metadata.attempts=u+1,c.$metadata.totalRetryDelay=d,c}u=a.getRetryCount();const g=a.getRetryDelay();d+=g,await new Promise(y=>setTimeout(y,g))}}else return s=s,s!=null&&s.mode&&(r.userAgent=[...r.userAgent||[],["cfg/retry-mode",s.mode]]),s.retry(t,n)},Za=e=>typeof e.acquireInitialRetryToken<"u"&&typeof e.refreshRetryTokenForRetry<"u"&&typeof e.recordSuccess<"u",Xa=e=>{const t={error:e,errorType:Qa(e)},r=Ja(e.$response);return r&&(t.retryAfterHint=r),t},Qa=e=>xn(e)?"THROTTLING":Sn(e)?"TRANSIENT":ha(e)?"SERVER_ERROR":"CLIENT_ERROR",Un={name:"retryMiddleware",tags:["RETRY"],step:"finalizeRequest",priority:"high",override:!0},jn=e=>({applyToStack:t=>{t.add(Ka(e),Un)}}),Ja=e=>{if(!ut.isInstance(e))return;const t=Object.keys(e.headers).find(i=>i.toLowerCase()==="retry-after");if(!t)return;const r=e.headers[t],n=Number(r);return Number.isNaN(n)?new Date(r):new Date(n*1e3)},Ya={step:"finalizeRequest",tags:["HTTP_SIGNING"],name:"httpSigningMiddleware",aliases:["apiKeyMiddleware","tokenMiddleware","awsAuthMiddleware"],override:!0,relation:"after",toMiddleware:Un.name},Hn=e=>({applyToStack:t=>{t.addRelativeTo(aa(),Ya)}});class zn{constructor(t){this.authSchemes=new Map;for(const[r,n]of Object.entries(t))n!==void 0&&this.authSchemes.set(r,n)}getIdentityProvider(t){return this.authSchemes.get(t)}}const ec=(e=>t=>qn(t)&&t.expiration.getTime()-Date.now()<e)(3e5),qn=e=>e.expiration!==void 0,tc=(e,t,r)=>{if(e===void 0)return;const n=typeof e!="function"?async()=>Promise.resolve(e):e;let s,i,o,a=!1;const c=async u=>{i||(i=n(u));try{s=await i,o=!0,a=!1}finally{i=void 0}return s};return t===void 0?async u=>((!o||u!=null&&u.forceRefresh)&&(s=await c(u)),s):async u=>((!o||u!=null&&u.forceRefresh)&&(s=await c(u)),a?s:r(s)?(t(s)&&await c(u),s):(a=!0,s))},mt=e=>{if(typeof e=="function")return e;const t=Promise.resolve(e);return()=>t},Wn="content-length";function rc(e){return t=>async r=>{const n=r.request;if(V.isInstance(n)){const{body:s,headers:i}=n;if(s&&Object.keys(i).map(o=>o.toLowerCase()).indexOf(Wn)===-1)try{const o=e(s);n.headers={...n.headers,[Wn]:String(o)}}catch{}}return t({...r,request:n})}}const nc={step:"build",tags:["SET_CONTENT_LENGTH","CONTENT_LENGTH"],name:"contentLengthMiddleware",override:!0},Gn=e=>({applyToStack:t=>{t.add(rc(e.bodyLengthChecker),nc)}}),Vn=e=>{var t,r;return ut.isInstance(e)?((t=e.headers)==null?void 0:t.date)??((r=e.headers)==null?void 0:r.Date):void 0},Kn=e=>new Date(Date.now()+e),sc=(e,t)=>Math.abs(Kn(t).getTime()-e)>=3e5,Zn=(e,t)=>{const r=Date.parse(e);return sc(r,t)?r-Date.now():t},Le=(e,t)=>{if(!t)throw new Error(`Property \`${e}\` is not resolved for AWS SDK SigV4Auth`);return t},ic=async e=>{var c,u,d;const t=Le("context",e.context),r=Le("config",e.config),n=(d=(u=(c=t.endpointV2)==null?void 0:c.properties)==null?void 0:u.authSchemes)==null?void 0:d[0],i=await Le("signer",r.signer)(n),o=e==null?void 0:e.signingRegion,a=e==null?void 0:e.signingName;return{config:r,signer:i,signingRegion:o,signingName:a}};class Xn{async sign(t,r,n){if(!V.isInstance(t))throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");const{config:s,signer:i,signingRegion:o,signingName:a}=await ic(n);return await i.sign(t,{signingDate:Kn(s.systemClockOffset),signingRegion:o,signingService:a})}errorHandler(t){return r=>{const n=r.ServerTime??Vn(r.$response);if(n){const s=Le("config",t.config),i=s.systemClockOffset;s.systemClockOffset=Zn(n,s.systemClockOffset),s.systemClockOffset!==i&&r.$metadata&&(r.$metadata.clockSkewCorrected=!0)}throw r}}successHandler(t,r){const n=Vn(t);if(n){const s=Le("config",r.config);s.systemClockOffset=Zn(n,s.systemClockOffset)}}}const oc="X-Amz-Algorithm",ac="X-Amz-Credential",Qn="X-Amz-Date",cc="X-Amz-SignedHeaders",uc="X-Amz-Expires",Jn="X-Amz-Signature",Yn="X-Amz-Security-Token",es="authorization",ts=Qn.toLowerCase(),dc=[es,ts,"date"],lc=Jn.toLowerCase(),Wt="x-amz-content-sha256",fc=Yn.toLowerCase(),hc={authorization:!0,"cache-control":!0,connection:!0,expect:!0,from:!0,"keep-alive":!0,"max-forwards":!0,pragma:!0,referer:!0,te:!0,trailer:!0,"transfer-encoding":!0,upgrade:!0,"user-agent":!0,"x-amzn-trace-id":!0},pc=/^proxy-/,mc=/^sec-/,Gt="AWS4-HMAC-SHA256",gc="AWS4-HMAC-SHA256-PAYLOAD",yc="UNSIGNED-PAYLOAD",wc=50,rs="aws4_request",bc=60*60*24*7,gt={},Vt=[],Kt=(e,t,r)=>`${e}/${t}/${r}/${rs}`,vc=async(e,t,r,n,s)=>{const i=await ns(e,t.secretAccessKey,t.accessKeyId),o=`${r}:${n}:${s}:${L(i)}:${t.sessionToken}`;if(o in gt)return gt[o];for(Vt.push(o);Vt.length>wc;)delete gt[Vt.shift()];let a=`AWS4${t.secretAccessKey}`;for(const c of[r,n,s,rs])a=await ns(e,a,c);return gt[o]=a},ns=(e,t,r)=>{const n=new e(t);return n.update(Ne(r)),n.digest()},ss=({headers:e},t,r)=>{const n={};for(const s of Object.keys(e).sort()){if(e[s]==null)continue;const i=s.toLowerCase();(i in hc||t!=null&&t.has(i)||pc.test(i)||mc.test(i))&&(!r||r&&!r.has(i))||(n[i]=e[s].trim().replace(/\s+/g," "))}return n},Ac=({query:e={}})=>{const t=[],r={};for(const n of Object.keys(e).sort()){if(n.toLowerCase()===lc)continue;t.push(n);const s=e[n];typeof s=="string"?r[n]=`${ae(n)}=${ae(s)}`:Array.isArray(s)&&(r[n]=s.slice(0).reduce((i,o)=>i.concat([`${ae(n)}=${ae(o)}`]),[]).sort().join("&"))}return t.map(n=>r[n]).filter(n=>n).join("&")},xc=e=>typeof ArrayBuffer=="function"&&e instanceof ArrayBuffer||Object.prototype.toString.call(e)==="[object ArrayBuffer]",Zt=async({headers:e,body:t},r)=>{for(const n of Object.keys(e))if(n.toLowerCase()===Wt)return e[n];if(t==null)return"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";if(typeof t=="string"||ArrayBuffer.isView(t)||xc(t)){const n=new r;return n.update(Ne(t)),L(await n.digest())}return yc};class Sc{format(t){const r=[];for(const i of Object.keys(t)){const o=he(i);r.push(Uint8Array.from([o.byteLength]),o,this.formatHeaderValue(t[i]))}const n=new Uint8Array(r.reduce((i,o)=>i+o.byteLength,0));let s=0;for(const i of r)n.set(i,s),s+=i.byteLength;return n}formatHeaderValue(t){switch(t.type){case"boolean":return Uint8Array.from([t.value?0:1]);case"byte":return Uint8Array.from([2,t.value]);case"short":const r=new DataView(new ArrayBuffer(3));return r.setUint8(0,3),r.setInt16(1,t.value,!1),new Uint8Array(r.buffer);case"integer":const n=new DataView(new ArrayBuffer(5));return n.setUint8(0,4),n.setInt32(1,t.value,!1),new Uint8Array(n.buffer);case"long":const s=new Uint8Array(9);return s[0]=5,s.set(t.value.bytes,1),s;case"binary":const i=new DataView(new ArrayBuffer(3+t.value.byteLength));i.setUint8(0,6),i.setUint16(1,t.value.byteLength,!1);const o=new Uint8Array(i.buffer);return o.set(t.value,3),o;case"string":const a=he(t.value),c=new DataView(new ArrayBuffer(3+a.byteLength));c.setUint8(0,7),c.setUint16(1,a.byteLength,!1);const u=new Uint8Array(c.buffer);return u.set(a,3),u;case"timestamp":const d=new Uint8Array(9);return d[0]=8,d.set(Cc.fromNumber(t.value.valueOf()).bytes,1),d;case"uuid":if(!Ec.test(t.value))throw new Error(`Invalid UUID received: ${t.value}`);const l=new Uint8Array(17);return l[0]=9,l.set(On(t.value.replace(/\-/g,"")),1),l}}}var is;(function(e){e[e.boolTrue=0]="boolTrue",e[e.boolFalse=1]="boolFalse",e[e.byte=2]="byte",e[e.short=3]="short",e[e.integer=4]="integer",e[e.long=5]="long",e[e.byteArray=6]="byteArray",e[e.string=7]="string",e[e.timestamp=8]="timestamp",e[e.uuid=9]="uuid"})(is||(is={}));const Ec=/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;let Cc=class $i{constructor(t){if(this.bytes=t,t.byteLength!==8)throw new Error("Int64 buffers must be exactly 8 bytes")}static fromNumber(t){if(t>9223372036854776e3||t<-9223372036854776e3)throw new Error(`${t} is too large (or, if negative, too small) to represent as an Int64`);const r=new Uint8Array(8);for(let n=7,s=Math.abs(Math.round(t));n>-1&&s>0;n--,s/=256)r[n]=s;return t<0&&os(r),new $i(r)}valueOf(){const t=this.bytes.slice(0),r=t[0]&128;return r&&os(t),parseInt(L(t),16)*(r?-1:1)}toString(){return String(this.valueOf())}};function os(e){for(let t=0;t<8;t++)e[t]^=255;for(let t=7;t>-1&&(e[t]++,e[t]===0);t--);}const _c=(e,t)=>{e=e.toLowerCase();for(const r of Object.keys(t))if(e===r.toLowerCase())return!0;return!1},as=({headers:e,query:t,...r})=>({...r,headers:{...e},query:t?Rc(t):void 0}),Rc=e=>Object.keys(e).reduce((t,r)=>{const n=e[r];return{...t,[r]:Array.isArray(n)?[...n]:n}},{}),Tc=(e,t={})=>{var s;const{headers:r,query:n={}}=typeof e.clone=="function"?e.clone():as(e);for(const i of Object.keys(r)){const o=i.toLowerCase();o.slice(0,6)==="x-amz-"&&!((s=t.unhoistableHeaders)!=null&&s.has(o))&&(n[i]=r[i],delete r[i])}return{...e,headers:r,query:n}},cs=e=>{e=typeof e.clone=="function"?e.clone():as(e);for(const t of Object.keys(e.headers))dc.indexOf(t.toLowerCase())>-1&&delete e.headers[t];return e},Mc=e=>Dc(e).toISOString().replace(/\.\d{3}Z$/,"Z"),Dc=e=>typeof e=="number"?new Date(e*1e3):typeof e=="string"?Number(e)?new Date(Number(e)*1e3):new Date(e):e;class us{constructor({applyChecksum:t,credentials:r,region:n,service:s,sha256:i,uriEscapePath:o=!0}){this.headerFormatter=new Sc,this.service=s,this.sha256=i,this.uriEscapePath=o,this.applyChecksum=typeof t=="boolean"?t:!0,this.regionProvider=te(n),this.credentialProvider=te(r)}async presign(t,r={}){const{signingDate:n=new Date,expiresIn:s=3600,unsignableHeaders:i,unhoistableHeaders:o,signableHeaders:a,signingRegion:c,signingService:u}=r,d=await this.credentialProvider();this.validateResolvedCredentials(d);const l=c??await this.regionProvider(),{longDate:f,shortDate:h}=yt(n);if(s>bc)return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");const p=Kt(h,l,u??this.service),g=Tc(cs(t),{unhoistableHeaders:o});d.sessionToken&&(g.query[Yn]=d.sessionToken),g.query[oc]=Gt,g.query[ac]=`${d.accessKeyId}/${p}`,g.query[Qn]=f,g.query[uc]=s.toString(10);const y=ss(g,i,a);return g.query[cc]=ds(y),g.query[Jn]=await this.getSignature(f,p,this.getSigningKey(d,l,h,u),this.createCanonicalRequest(g,y,await Zt(t,this.sha256))),g}async sign(t,r){return typeof t=="string"?this.signString(t,r):t.headers&&t.payload?this.signEvent(t,r):t.message?this.signMessage(t,r):this.signRequest(t,r)}async signEvent({headers:t,payload:r},{signingDate:n=new Date,priorSignature:s,signingRegion:i,signingService:o}){const a=i??await this.regionProvider(),{shortDate:c,longDate:u}=yt(n),d=Kt(c,a,o??this.service),l=await Zt({headers:{},body:r},this.sha256),f=new this.sha256;f.update(t);const h=L(await f.digest()),p=[gc,u,d,s,h,l].join(`
`);return this.signString(p,{signingDate:n,signingRegion:a,signingService:o})}async signMessage(t,{signingDate:r=new Date,signingRegion:n,signingService:s}){return this.signEvent({headers:this.headerFormatter.format(t.message.headers),payload:t.message.body},{signingDate:r,signingRegion:n,signingService:s,priorSignature:t.priorSignature}).then(o=>({message:t.message,signature:o}))}async signString(t,{signingDate:r=new Date,signingRegion:n,signingService:s}={}){const i=await this.credentialProvider();this.validateResolvedCredentials(i);const o=n??await this.regionProvider(),{shortDate:a}=yt(r),c=new this.sha256(await this.getSigningKey(i,o,a,s));return c.update(Ne(t)),L(await c.digest())}async signRequest(t,{signingDate:r=new Date,signableHeaders:n,unsignableHeaders:s,signingRegion:i,signingService:o}={}){const a=await this.credentialProvider();this.validateResolvedCredentials(a);const c=i??await this.regionProvider(),u=cs(t),{longDate:d,shortDate:l}=yt(r),f=Kt(l,c,o??this.service);u.headers[ts]=d,a.sessionToken&&(u.headers[fc]=a.sessionToken);const h=await Zt(u,this.sha256);!_c(Wt,u.headers)&&this.applyChecksum&&(u.headers[Wt]=h);const p=ss(u,s,n),g=await this.getSignature(d,f,this.getSigningKey(a,c,l,o),this.createCanonicalRequest(u,p,h));return u.headers[es]=`${Gt} Credential=${a.accessKeyId}/${f}, SignedHeaders=${ds(p)}, Signature=${g}`,u}createCanonicalRequest(t,r,n){const s=Object.keys(r).sort();return`${t.method}
${this.getCanonicalPath(t)}
${Ac(t)}
${s.map(i=>`${i}:${r[i]}`).join(`
`)}

${s.join(";")}
${n}`}async createStringToSign(t,r,n){const s=new this.sha256;s.update(Ne(n));const i=await s.digest();return`${Gt}
${t}
${r}
${L(i)}`}getCanonicalPath({path:t}){if(this.uriEscapePath){const r=[];for(const i of t.split("/"))(i==null?void 0:i.length)!==0&&i!=="."&&(i===".."?r.pop():r.push(i));const n=`${t!=null&&t.startsWith("/")?"/":""}${r.join("/")}${r.length>0&&(t!=null&&t.endsWith("/"))?"/":""}`;return ae(n).replace(/%2F/g,"/")}return t}async getSignature(t,r,n,s){const i=await this.createStringToSign(t,r,s),o=new this.sha256(await n);return o.update(Ne(i)),L(await o.digest())}getSigningKey(t,r,n,s){return vc(this.sha256,t,n,r,s||this.service)}validateResolvedCredentials(t){if(typeof t!="object"||typeof t.accessKeyId!="string"||typeof t.secretAccessKey!="string")throw new Error("Resolved credential object is not valid")}}const yt=e=>{const t=Mc(e).replace(/[\-:]/g,"");return{longDate:t,shortDate:t.slice(0,8)}},ds=e=>Object.keys(e).sort().join(";"),ls=e=>{let t;e.credentials&&(t=tc(e.credentials,ec,qn)),t||(e.credentialDefaultProvider?t=mt(e.credentialDefaultProvider(Object.assign({},e,{parentClientConfig:e}))):t=async()=>{throw new Error("`credentials` is missing")});const{signingEscapePath:r=!0,systemClockOffset:n=e.systemClockOffset||0,sha256:s}=e;let i;return e.signer?i=mt(e.signer):e.regionInfoProvider?i=()=>mt(e.region)().then(async o=>[await e.regionInfoProvider(o,{useFipsEndpoint:await e.useFipsEndpoint(),useDualstackEndpoint:await e.useDualstackEndpoint()})||{},o]).then(([o,a])=>{const{signingRegion:c,signingService:u}=o;e.signingRegion=e.signingRegion||c||a,e.signingName=e.signingName||u||e.serviceId;const d={...e,credentials:t,region:e.signingRegion,service:e.signingName,sha256:s,uriEscapePath:r},l=e.signerConstructor||us;return new l(d)}):i=async o=>{o=Object.assign({},{name:"sigv4",signingName:e.signingName||e.defaultSigningName,signingRegion:await mt(e.region)(),properties:{}},o);const a=o.signingRegion,c=o.signingName;e.signingRegion=e.signingRegion||a,e.signingName=e.signingName||c||e.serviceId;const u={...e,credentials:t,region:e.signingRegion,service:e.signingName,sha256:s,uriEscapePath:r},d=e.signerConstructor||us;return new d(u)},{...e,systemClockOffset:n,signingEscapePath:r,credentials:t,signer:i}},Pc=(e,t)=>Na(e,t).then(r=>t.utf8Encoder(r)),fs=(e,t)=>Pc(e,t).then(r=>{if(r.length)try{return JSON.parse(r)}catch(n){throw(n==null?void 0:n.name)==="SyntaxError"&&Object.defineProperty(n,"$responseBodyText",{value:r}),n}return{}}),Bc=async(e,t)=>{const r=await fs(e,t);return r.message=r.message??r.Message,r},kc=(e,t)=>{const r=(i,o)=>Object.keys(i).find(a=>a.toLowerCase()===o.toLowerCase()),n=i=>{let o=i;return typeof o=="number"&&(o=o.toString()),o.indexOf(",")>=0&&(o=o.split(",")[0]),o.indexOf(":")>=0&&(o=o.split(":")[0]),o.indexOf("#")>=0&&(o=o.split("#")[1]),o},s=r(e.headers,"x-amzn-errortype");if(s!==void 0)return n(e.headers[s]);if(t.code!==void 0)return n(t.code);if(t.__type!==void 0)return n(t.__type)},Ic=async(e,t,r)=>({operation:Ie(t).operation,region:await te(e.region)()||(()=>{throw new Error("expected `region` to be configured for `aws.auth#sigv4`")})()});function Oc(e){return{schemeId:"aws.auth#sigv4",signingProperties:{name:"translate",region:e.region},propertiesExtractor:(t,r)=>({signingProperties:{config:t,context:r}})}}const $c=e=>{const t=[];switch(e.operation){default:t.push(Oc(e))}return t},Fc=e=>({...ls(e)}),Nc=e=>({...e,useDualstackEndpoint:e.useDualstackEndpoint??!1,useFipsEndpoint:e.useFipsEndpoint??!1,defaultSigningName:"translate"}),Lc={UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}},Uc={name:"@aws-sdk/client-translate",description:"AWS SDK for JavaScript Translate Client for Node.js, Browser and React Native",version:"3.556.0",scripts:{build:"concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'","build:cjs":"node ../../scripts/compilation/inline client-translate","build:es":"tsc -p tsconfig.es.json","build:include:deps":"lerna run --scope $npm_package_name --include-dependencies build","build:types":"tsc -p tsconfig.types.json","build:types:downlevel":"downlevel-dts dist-types dist-types/ts3.4",clean:"rimraf ./dist-* && rimraf *.tsbuildinfo","extract:docs":"api-extractor run --local","generate:client":"node ../../scripts/generate-clients/single-service --solo translate"},main:"./dist-cjs/index.js",types:"./dist-types/index.d.ts",module:"./dist-es/index.js",sideEffects:!1,dependencies:{"@aws-crypto/sha256-browser":"3.0.0","@aws-crypto/sha256-js":"3.0.0","@aws-sdk/client-sts":"3.556.0","@aws-sdk/core":"3.556.0","@aws-sdk/credential-provider-node":"3.556.0","@aws-sdk/middleware-host-header":"3.535.0","@aws-sdk/middleware-logger":"3.535.0","@aws-sdk/middleware-recursion-detection":"3.535.0","@aws-sdk/middleware-user-agent":"3.540.0","@aws-sdk/region-config-resolver":"3.535.0","@aws-sdk/types":"3.535.0","@aws-sdk/util-endpoints":"3.540.0","@aws-sdk/util-user-agent-browser":"3.535.0","@aws-sdk/util-user-agent-node":"3.535.0","@smithy/config-resolver":"^2.2.0","@smithy/core":"^1.4.2","@smithy/fetch-http-handler":"^2.5.0","@smithy/hash-node":"^2.2.0","@smithy/invalid-dependency":"^2.2.0","@smithy/middleware-content-length":"^2.2.0","@smithy/middleware-endpoint":"^2.5.1","@smithy/middleware-retry":"^2.3.1","@smithy/middleware-serde":"^2.3.0","@smithy/middleware-stack":"^2.2.0","@smithy/node-config-provider":"^2.3.0","@smithy/node-http-handler":"^2.5.0","@smithy/protocol-http":"^3.3.0","@smithy/smithy-client":"^2.5.1","@smithy/types":"^2.12.0","@smithy/url-parser":"^2.2.0","@smithy/util-base64":"^2.3.0","@smithy/util-body-length-browser":"^2.2.0","@smithy/util-body-length-node":"^2.3.0","@smithy/util-defaults-mode-browser":"^2.2.1","@smithy/util-defaults-mode-node":"^2.3.1","@smithy/util-endpoints":"^1.2.0","@smithy/util-middleware":"^2.2.0","@smithy/util-retry":"^2.2.0","@smithy/util-utf8":"^2.3.0",tslib:"^2.6.2",uuid:"^9.0.1"},devDependencies:{"@smithy/service-client-documentation-generator":"^2.2.0","@tsconfig/node14":"1.0.3","@types/node":"^14.14.31","@types/uuid":"^9.0.4",concurrently:"7.0.0","downlevel-dts":"0.10.1",rimraf:"3.0.2",typescript:"~4.9.5"},engines:{node:">=14.0.0"},typesVersions:{"<4.0":{"dist-types/*":["dist-types/ts3.4/*"]}},files:["dist-*/**"],author:{name:"AWS SDK for JavaScript Team",url:"https://aws.amazon.com/javascript/"},license:"Apache-2.0",browser:{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.browser"},"react-native":{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.native"},homepage:"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-translate",repository:{type:"git",url:"https://github.com/aws/aws-sdk-js-v3.git",directory:"clients/client-translate"}};var Xt={};/*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */var Qt=function(e,t){return Qt=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,n){r.__proto__=n}||function(r,n){for(var s in n)n.hasOwnProperty(s)&&(r[s]=n[s])},Qt(e,t)};function jc(e,t){Qt(e,t);function r(){this.constructor=e}e.prototype=t===null?Object.create(t):(r.prototype=t.prototype,new r)}var Jt=function(){return Jt=Object.assign||function(t){for(var r,n=1,s=arguments.length;n<s;n++){r=arguments[n];for(var i in r)Object.prototype.hasOwnProperty.call(r,i)&&(t[i]=r[i])}return t},Jt.apply(this,arguments)};function Hc(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(e!=null&&typeof Object.getOwnPropertySymbols=="function")for(var s=0,n=Object.getOwnPropertySymbols(e);s<n.length;s++)t.indexOf(n[s])<0&&Object.prototype.propertyIsEnumerable.call(e,n[s])&&(r[n[s]]=e[n[s]]);return r}function zc(e,t,r,n){var s=arguments.length,i=s<3?t:n===null?n=Object.getOwnPropertyDescriptor(t,r):n,o;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")i=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(i=(s<3?o(i):s>3?o(t,r,i):o(t,r))||i);return s>3&&i&&Object.defineProperty(t,r,i),i}function qc(e,t){return function(r,n){t(r,n,e)}}function Wc(e,t){if(typeof Reflect=="object"&&typeof Reflect.metadata=="function")return Reflect.metadata(e,t)}function Gc(e,t,r,n){function s(i){return i instanceof r?i:new r(function(o){o(i)})}return new(r||(r=Promise))(function(i,o){function a(d){try{u(n.next(d))}catch(l){o(l)}}function c(d){try{u(n.throw(d))}catch(l){o(l)}}function u(d){d.done?i(d.value):s(d.value).then(a,c)}u((n=n.apply(e,t||[])).next())})}function Vc(e,t){var r={label:0,sent:function(){if(i[0]&1)throw i[1];return i[1]},trys:[],ops:[]},n,s,i,o;return o={next:a(0),throw:a(1),return:a(2)},typeof Symbol=="function"&&(o[Symbol.iterator]=function(){return this}),o;function a(u){return function(d){return c([u,d])}}function c(u){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,s&&(i=u[0]&2?s.return:u[0]?s.throw||((i=s.return)&&i.call(s),0):s.next)&&!(i=i.call(s,u[1])).done)return i;switch(s=0,i&&(u=[u[0]&2,i.value]),u[0]){case 0:case 1:i=u;break;case 4:return r.label++,{value:u[1],done:!1};case 5:r.label++,s=u[1],u=[0];continue;case 7:u=r.ops.pop(),r.trys.pop();continue;default:if(i=r.trys,!(i=i.length>0&&i[i.length-1])&&(u[0]===6||u[0]===2)){r=0;continue}if(u[0]===3&&(!i||u[1]>i[0]&&u[1]<i[3])){r.label=u[1];break}if(u[0]===6&&r.label<i[1]){r.label=i[1],i=u;break}if(i&&r.label<i[2]){r.label=i[2],r.ops.push(u);break}i[2]&&r.ops.pop(),r.trys.pop();continue}u=t.call(e,r)}catch(d){u=[6,d],s=0}finally{n=i=0}if(u[0]&5)throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}}function Kc(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}function Zc(e,t){for(var r in e)r!=="default"&&!t.hasOwnProperty(r)&&(t[r]=e[r])}function Yt(e){var t=typeof Symbol=="function"&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&typeof e.length=="number")return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function hs(e,t){var r=typeof Symbol=="function"&&e[Symbol.iterator];if(!r)return e;var n=r.call(e),s,i=[],o;try{for(;(t===void 0||t-- >0)&&!(s=n.next()).done;)i.push(s.value)}catch(a){o={error:a}}finally{try{s&&!s.done&&(r=n.return)&&r.call(n)}finally{if(o)throw o.error}}return i}function Xc(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(hs(arguments[t]));return e}function Qc(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;for(var n=Array(e),s=0,t=0;t<r;t++)for(var i=arguments[t],o=0,a=i.length;o<a;o++,s++)n[s]=i[o];return n}function Ue(e){return this instanceof Ue?(this.v=e,this):new Ue(e)}function Jc(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n=r.apply(e,t||[]),s,i=[];return s={},o("next"),o("throw"),o("return"),s[Symbol.asyncIterator]=function(){return this},s;function o(f){n[f]&&(s[f]=function(h){return new Promise(function(p,g){i.push([f,h,p,g])>1||a(f,h)})})}function a(f,h){try{c(n[f](h))}catch(p){l(i[0][3],p)}}function c(f){f.value instanceof Ue?Promise.resolve(f.value.v).then(u,d):l(i[0][2],f)}function u(f){a("next",f)}function d(f){a("throw",f)}function l(f,h){f(h),i.shift(),i.length&&a(i[0][0],i[0][1])}}function Yc(e){var t,r;return t={},n("next"),n("throw",function(s){throw s}),n("return"),t[Symbol.iterator]=function(){return this},t;function n(s,i){t[s]=e[s]?function(o){return(r=!r)?{value:Ue(e[s](o)),done:s==="return"}:i?i(o):o}:i}}function eu(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t=e[Symbol.asyncIterator],r;return t?t.call(e):(e=typeof Yt=="function"?Yt(e):e[Symbol.iterator](),r={},n("next"),n("throw"),n("return"),r[Symbol.asyncIterator]=function(){return this},r);function n(i){r[i]=e[i]&&function(o){return new Promise(function(a,c){o=e[i](o),s(a,c,o.done,o.value)})}}function s(i,o,a,c){Promise.resolve(c).then(function(u){i({value:u,done:a})},o)}}function tu(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function ru(e){if(e&&e.__esModule)return e;var t={};if(e!=null)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}function nu(e){return e&&e.__esModule?e:{default:e}}function su(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)}function iu(e,t,r){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,r),r}const ce=vt(Object.freeze(Object.defineProperty({__proto__:null,get __assign(){return Jt},__asyncDelegator:Yc,__asyncGenerator:Jc,__asyncValues:eu,__await:Ue,__awaiter:Gc,__classPrivateFieldGet:su,__classPrivateFieldSet:iu,__createBinding:Kc,__decorate:zc,__exportStar:Zc,__extends:jc,__generator:Vc,__importDefault:nu,__importStar:ru,__makeTemplateObject:tu,__metadata:Wc,__param:qc,__read:hs,__rest:Hc,__spread:Xc,__spreadArrays:Qc,__values:Yt},Symbol.toStringTag,{value:"Module"})));var je={},He={},ze={},ps;function ou(){if(ps)return ze;ps=1,Object.defineProperty(ze,"__esModule",{value:!0}),ze.isEmptyData=void 0;function e(t){return typeof t=="string"?t.length===0:t.byteLength===0}return ze.isEmptyData=e,ze}var er={},ms;function gs(){return ms||(ms=1,function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.EMPTY_DATA_SHA_256=e.SHA_256_HMAC_ALGO=e.SHA_256_HASH=void 0,e.SHA_256_HASH={name:"SHA-256"},e.SHA_256_HMAC_ALGO={name:"HMAC",hash:e.SHA_256_HASH},e.EMPTY_DATA_SHA_256=new Uint8Array([227,176,196,66,152,252,28,20,154,251,244,200,153,111,185,36,39,174,65,228,100,155,147,76,164,149,153,27,120,82,184,85])}(er)),er}const au=e=>{const t=[];for(let r=0,n=e.length;r<n;r++){const s=e.charCodeAt(r);if(s<128)t.push(s);else if(s<2048)t.push(s>>6|192,s&63|128);else if(r+1<e.length&&(s&64512)===55296&&(e.charCodeAt(r+1)&64512)===56320){const i=65536+((s&1023)<<10)+(e.charCodeAt(++r)&1023);t.push(i>>18|240,i>>12&63|128,i>>6&63|128,i&63|128)}else t.push(s>>12|224,s>>6&63|128,s&63|128)}return Uint8Array.from(t)},cu=e=>{let t="";for(let r=0,n=e.length;r<n;r++){const s=e[r];if(s<128)t+=String.fromCharCode(s);else if(192<=s&&s<224){const i=e[++r];t+=String.fromCharCode((s&31)<<6|i&63)}else if(240<=s&&s<365){const o="%"+[s,e[++r],e[++r],e[++r]].map(a=>a.toString(16)).join("%");t+=decodeURIComponent(o)}else t+=String.fromCharCode((s&15)<<12|(e[++r]&63)<<6|e[++r]&63)}return t};function uu(e){return new TextEncoder().encode(e)}function du(e){return new TextDecoder("utf-8").decode(e)}const ys=vt(Object.freeze(Object.defineProperty({__proto__:null,fromUtf8:e=>typeof TextEncoder=="function"?uu(e):au(e),toUtf8:e=>typeof TextDecoder=="function"?du(e):cu(e)},Symbol.toStringTag,{value:"Module"}))),lu={};function fu(){return typeof window<"u"?window:typeof self<"u"?self:lu}const tr=vt(Object.freeze(Object.defineProperty({__proto__:null,locateWindow:fu},Symbol.toStringTag,{value:"Module"})));var ws;function bs(){if(ws)return He;ws=1,Object.defineProperty(He,"__esModule",{value:!0}),He.Sha256=void 0;var e=ou(),t=gs(),r=ys,n=tr,s=function(){function a(c){this.secret=c,this.reset()}return a.prototype.update=function(c){var u=this;(0,e.isEmptyData)(c)||(this.operation=this.operation.then(function(d){return d.onerror=function(){u.operation=Promise.reject(new Error("Error encountered updating hash"))},d.process(o(c)),d}),this.operation.catch(function(){}))},a.prototype.digest=function(){return this.operation.then(function(c){return new Promise(function(u,d){c.onerror=function(){d(new Error("Error encountered finalizing hash"))},c.oncomplete=function(){c.result&&u(new Uint8Array(c.result)),d(new Error("Error encountered finalizing hash"))},c.finish()})})},a.prototype.reset=function(){this.secret?(this.operation=i(this.secret).then(function(c){return(0,n.locateWindow)().msCrypto.subtle.sign(t.SHA_256_HMAC_ALGO,c)}),this.operation.catch(function(){})):this.operation=Promise.resolve((0,n.locateWindow)().msCrypto.subtle.digest("SHA-256"))},a}();He.Sha256=s;function i(a){return new Promise(function(c,u){var d=(0,n.locateWindow)().msCrypto.subtle.importKey("raw",o(a),t.SHA_256_HMAC_ALGO,!1,["sign"]);d.oncomplete=function(){d.result&&c(d.result),u(new Error("ImportKey completed without importing key."))},d.onerror=function(){u(new Error("ImportKey failed to import key."))}})}function o(a){return typeof a=="string"?(0,r.fromUtf8)(a):ArrayBuffer.isView(a)?new Uint8Array(a.buffer,a.byteOffset,a.byteLength/Uint8Array.BYTES_PER_ELEMENT):new Uint8Array(a)}return He}var qe={},rr={},We={},vs;function hu(){if(vs)return We;vs=1,Object.defineProperty(We,"__esModule",{value:!0}),We.convertToBuffer=void 0;var e=ys,t=typeof Buffer<"u"&&Buffer.from?function(n){return Buffer.from(n,"utf8")}:e.fromUtf8;function r(n){return n instanceof Uint8Array?n:typeof n=="string"?t(n):ArrayBuffer.isView(n)?new Uint8Array(n.buffer,n.byteOffset,n.byteLength/Uint8Array.BYTES_PER_ELEMENT):new Uint8Array(n)}return We.convertToBuffer=r,We}var Ge={},As;function pu(){if(As)return Ge;As=1,Object.defineProperty(Ge,"__esModule",{value:!0}),Ge.isEmptyData=void 0;function e(t){return typeof t=="string"?t.length===0:t.byteLength===0}return Ge.isEmptyData=e,Ge}var Ve={},xs;function mu(){if(xs)return Ve;xs=1,Object.defineProperty(Ve,"__esModule",{value:!0}),Ve.numToUint8=void 0;function e(t){return new Uint8Array([(t&4278190080)>>24,(t&16711680)>>16,(t&65280)>>8,t&255])}return Ve.numToUint8=e,Ve}var Ke={},Ss;function gu(){if(Ss)return Ke;Ss=1,Object.defineProperty(Ke,"__esModule",{value:!0}),Ke.uint32ArrayFrom=void 0;function e(t){if(!Uint32Array.from){for(var r=new Uint32Array(t.length),n=0;n<t.length;)r[n]=t[n],n+=1;return r}return Uint32Array.from(t)}return Ke.uint32ArrayFrom=e,Ke}var Es;function Ze(){return Es||(Es=1,function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.uint32ArrayFrom=e.numToUint8=e.isEmptyData=e.convertToBuffer=void 0;var t=hu();Object.defineProperty(e,"convertToBuffer",{enumerable:!0,get:function(){return t.convertToBuffer}});var r=pu();Object.defineProperty(e,"isEmptyData",{enumerable:!0,get:function(){return r.isEmptyData}});var n=mu();Object.defineProperty(e,"numToUint8",{enumerable:!0,get:function(){return n.numToUint8}});var s=gu();Object.defineProperty(e,"uint32ArrayFrom",{enumerable:!0,get:function(){return s.uint32ArrayFrom}})}(rr)),rr}var Cs;function _s(){if(Cs)return qe;Cs=1,Object.defineProperty(qe,"__esModule",{value:!0}),qe.Sha256=void 0;var e=Ze(),t=gs(),r=tr,n=function(){function s(i){this.toHash=new Uint8Array(0),this.secret=i,this.reset()}return s.prototype.update=function(i){if(!(0,e.isEmptyData)(i)){var o=(0,e.convertToBuffer)(i),a=new Uint8Array(this.toHash.byteLength+o.byteLength);a.set(this.toHash,0),a.set(o,this.toHash.byteLength),this.toHash=a}},s.prototype.digest=function(){var i=this;return this.key?this.key.then(function(o){return(0,r.locateWindow)().crypto.subtle.sign(t.SHA_256_HMAC_ALGO,o,i.toHash).then(function(a){return new Uint8Array(a)})}):(0,e.isEmptyData)(this.toHash)?Promise.resolve(t.EMPTY_DATA_SHA_256):Promise.resolve().then(function(){return(0,r.locateWindow)().crypto.subtle.digest(t.SHA_256_HASH,i.toHash)}).then(function(o){return Promise.resolve(new Uint8Array(o))})},s.prototype.reset=function(){var i=this;this.toHash=new Uint8Array(0),this.secret&&this.secret!==void 0&&(this.key=new Promise(function(o,a){(0,r.locateWindow)().crypto.subtle.importKey("raw",(0,e.convertToBuffer)(i.secret),t.SHA_256_HMAC_ALGO,!1,["sign"]).then(o,a)}),this.key.catch(function(){}))},s}();return qe.Sha256=n,qe}var nr={},Xe={},U={},Rs;function Ts(){return Rs||(Rs=1,Object.defineProperty(U,"__esModule",{value:!0}),U.MAX_HASHABLE_LENGTH=U.INIT=U.KEY=U.DIGEST_LENGTH=U.BLOCK_SIZE=void 0,U.BLOCK_SIZE=64,U.DIGEST_LENGTH=32,U.KEY=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),U.INIT=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],U.MAX_HASHABLE_LENGTH=Math.pow(2,53)-1),U}var Qe={},Ms;function yu(){if(Ms)return Qe;Ms=1,Object.defineProperty(Qe,"__esModule",{value:!0}),Qe.RawSha256=void 0;var e=Ts(),t=function(){function r(){this.state=Int32Array.from(e.INIT),this.temp=new Int32Array(64),this.buffer=new Uint8Array(64),this.bufferLength=0,this.bytesHashed=0,this.finished=!1}return r.prototype.update=function(n){if(this.finished)throw new Error("Attempted to update an already finished hash.");var s=0,i=n.byteLength;if(this.bytesHashed+=i,this.bytesHashed*8>e.MAX_HASHABLE_LENGTH)throw new Error("Cannot hash more than 2^53 - 1 bits");for(;i>0;)this.buffer[this.bufferLength++]=n[s++],i--,this.bufferLength===e.BLOCK_SIZE&&(this.hashBuffer(),this.bufferLength=0)},r.prototype.digest=function(){if(!this.finished){var n=this.bytesHashed*8,s=new DataView(this.buffer.buffer,this.buffer.byteOffset,this.buffer.byteLength),i=this.bufferLength;if(s.setUint8(this.bufferLength++,128),i%e.BLOCK_SIZE>=e.BLOCK_SIZE-8){for(var o=this.bufferLength;o<e.BLOCK_SIZE;o++)s.setUint8(o,0);this.hashBuffer(),this.bufferLength=0}for(var o=this.bufferLength;o<e.BLOCK_SIZE-8;o++)s.setUint8(o,0);s.setUint32(e.BLOCK_SIZE-8,Math.floor(n/4294967296),!0),s.setUint32(e.BLOCK_SIZE-4,n),this.hashBuffer(),this.finished=!0}for(var a=new Uint8Array(e.DIGEST_LENGTH),o=0;o<8;o++)a[o*4]=this.state[o]>>>24&255,a[o*4+1]=this.state[o]>>>16&255,a[o*4+2]=this.state[o]>>>8&255,a[o*4+3]=this.state[o]>>>0&255;return a},r.prototype.hashBuffer=function(){for(var n=this,s=n.buffer,i=n.state,o=i[0],a=i[1],c=i[2],u=i[3],d=i[4],l=i[5],f=i[6],h=i[7],p=0;p<e.BLOCK_SIZE;p++){if(p<16)this.temp[p]=(s[p*4]&255)<<24|(s[p*4+1]&255)<<16|(s[p*4+2]&255)<<8|s[p*4+3]&255;else{var g=this.temp[p-2],y=(g>>>17|g<<15)^(g>>>19|g<<13)^g>>>10;g=this.temp[p-15];var v=(g>>>7|g<<25)^(g>>>18|g<<14)^g>>>3;this.temp[p]=(y+this.temp[p-7]|0)+(v+this.temp[p-16]|0)}var S=(((d>>>6|d<<26)^(d>>>11|d<<21)^(d>>>25|d<<7))+(d&l^~d&f)|0)+(h+(e.KEY[p]+this.temp[p]|0)|0)|0,_=((o>>>2|o<<30)^(o>>>13|o<<19)^(o>>>22|o<<10))+(o&a^o&c^a&c)|0;h=f,f=l,l=d,d=u+S|0,u=c,c=a,a=o,o=S+_|0}i[0]+=o,i[1]+=a,i[2]+=c,i[3]+=u,i[4]+=d,i[5]+=l,i[6]+=f,i[7]+=h},r}();return Qe.RawSha256=t,Qe}var Ds;function wu(){if(Ds)return Xe;Ds=1,Object.defineProperty(Xe,"__esModule",{value:!0}),Xe.Sha256=void 0;var e=ce,t=Ts(),r=yu(),n=Ze(),s=function(){function o(a){this.secret=a,this.hash=new r.RawSha256,this.reset()}return o.prototype.update=function(a){if(!((0,n.isEmptyData)(a)||this.error))try{this.hash.update((0,n.convertToBuffer)(a))}catch(c){this.error=c}},o.prototype.digestSync=function(){if(this.error)throw this.error;return this.outer?(this.outer.finished||this.outer.update(this.hash.digest()),this.outer.digest()):this.hash.digest()},o.prototype.digest=function(){return e.__awaiter(this,void 0,void 0,function(){return e.__generator(this,function(a){return[2,this.digestSync()]})})},o.prototype.reset=function(){if(this.hash=new r.RawSha256,this.secret){this.outer=new r.RawSha256;var a=i(this.secret),c=new Uint8Array(t.BLOCK_SIZE);c.set(a);for(var u=0;u<t.BLOCK_SIZE;u++)a[u]^=54,c[u]^=92;this.hash.update(a),this.outer.update(c);for(var u=0;u<a.byteLength;u++)a[u]=0}},o}();Xe.Sha256=s;function i(o){var a=(0,n.convertToBuffer)(o);if(a.byteLength>t.BLOCK_SIZE){var c=new r.RawSha256;c.update(a),a=c.digest()}var u=new Uint8Array(t.BLOCK_SIZE);return u.set(a),u}return Xe}var Ps;function bu(){return Ps||(Ps=1,function(e){Object.defineProperty(e,"__esModule",{value:!0});var t=ce;t.__exportStar(wu(),e)}(nr)),nr}var sr={},W={},Bs;function vu(){if(Bs)return W;Bs=1,Object.defineProperty(W,"__esModule",{value:!0}),W.supportsZeroByteGCM=W.supportsSubtleCrypto=W.supportsSecureRandom=W.supportsWebCrypto=void 0;var e=ce,t=["decrypt","digest","encrypt","exportKey","generateKey","importKey","sign","verify"];function r(o){if(n(o)&&typeof o.crypto.subtle=="object"){var a=o.crypto.subtle;return s(a)}return!1}W.supportsWebCrypto=r;function n(o){if(typeof o=="object"&&typeof o.crypto=="object"){var a=o.crypto.getRandomValues;return typeof a=="function"}return!1}W.supportsSecureRandom=n;function s(o){return o&&t.every(function(a){return typeof o[a]=="function"})}W.supportsSubtleCrypto=s;function i(o){return e.__awaiter(this,void 0,void 0,function(){var a,c;return e.__generator(this,function(u){switch(u.label){case 0:if(!s(o))return[2,!1];u.label=1;case 1:return u.trys.push([1,4,,5]),[4,o.generateKey({name:"AES-GCM",length:128},!1,["encrypt"])];case 2:return a=u.sent(),[4,o.encrypt({name:"AES-GCM",iv:new Uint8Array(Array(12)),additionalData:new Uint8Array(Array(16)),tagLength:128},a,new Uint8Array(0))];case 3:return c=u.sent(),[2,c.byteLength===16];case 4:return u.sent(),[2,!1];case 5:return[2]}})})}return W.supportsZeroByteGCM=i,W}var ks;function Au(){return ks||(ks=1,function(e){Object.defineProperty(e,"__esModule",{value:!0});var t=ce;t.__exportStar(vu(),e)}(sr)),sr}var ir={},or={},Is;function xu(){return Is||(Is=1,Object.defineProperty(or,"__esModule",{value:!0})),or}var ar={},Os;function Su(){return Os||(Os=1,Object.defineProperty(ar,"__esModule",{value:!0})),ar}var cr={},$s;function Eu(){return $s||($s=1,Object.defineProperty(cr,"__esModule",{value:!0})),cr}var ur={},Fs;function Cu(){return Fs||(Fs=1,Object.defineProperty(ur,"__esModule",{value:!0})),ur}var Je={},Ns;function _u(){if(Ns)return Je;Ns=1,Object.defineProperty(Je,"__esModule",{value:!0}),Je.isMsWindow=void 0;var e=["decrypt","digest","encrypt","exportKey","generateKey","importKey","sign","verify"];function t(n){return"MSInputMethodContext"in n&&"msCrypto"in n}function r(n){if(t(n)&&n.msCrypto.subtle!==void 0){var s=n.msCrypto,i=s.getRandomValues,o=s.subtle;return e.map(function(a){return o[a]}).concat(i).every(function(a){return typeof a=="function"})}return!1}return Je.isMsWindow=r,Je}var Ls;function Ru(){return Ls||(Ls=1,function(e){Object.defineProperty(e,"__esModule",{value:!0});var t=ce;t.__exportStar(xu(),e),t.__exportStar(Su(),e),t.__exportStar(Eu(),e),t.__exportStar(Cu(),e),t.__exportStar(_u(),e)}(ir)),ir}var Us;function Tu(){if(Us)return je;Us=1,Object.defineProperty(je,"__esModule",{value:!0}),je.Sha256=void 0;var e=bs(),t=_s(),r=bu(),n=Au(),s=Ru(),i=tr,o=Ze(),a=function(){function c(u){(0,n.supportsWebCrypto)((0,i.locateWindow)())?this.hash=new t.Sha256(u):(0,s.isMsWindow)((0,i.locateWindow)())?this.hash=new e.Sha256(u):this.hash=new r.Sha256(u)}return c.prototype.update=function(u,d){this.hash.update((0,o.convertToBuffer)(u))},c.prototype.digest=function(){return this.hash.digest()},c.prototype.reset=function(){this.hash.reset()},c}();return je.Sha256=a,je}(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.WebCryptoSha256=e.Ie11Sha256=void 0;var t=ce;t.__exportStar(Tu(),e);var r=bs();Object.defineProperty(e,"Ie11Sha256",{enumerable:!0,get:function(){return r.Sha256}});var n=_s();Object.defineProperty(e,"WebCryptoSha256",{enumerable:!0,get:function(){return n.Sha256}})})(Xt);const Mu={"Amazon Silk":"amazon_silk","Android Browser":"android",Bada:"bada",BlackBerry:"blackberry",Chrome:"chrome",Chromium:"chromium",Electron:"electron",Epiphany:"epiphany",Firefox:"firefox",Focus:"focus",Generic:"generic","Google Search":"google_search",Googlebot:"googlebot","Internet Explorer":"ie","K-Meleon":"k_meleon",Maxthon:"maxthon","Microsoft Edge":"edge","MZ Browser":"mz","NAVER Whale Browser":"naver",Opera:"opera","Opera Coast":"opera_coast",PhantomJS:"phantomjs",Puffin:"puffin",QupZilla:"qupzilla",QQ:"qq",QQLite:"qqlite",Safari:"safari",Sailfish:"sailfish","Samsung Internet for Android":"samsung_internet",SeaMonkey:"seamonkey",Sleipnir:"sleipnir",Swing:"swing",Tizen:"tizen","UC Browser":"uc",Vivaldi:"vivaldi","WebOS Browser":"webos",WeChat:"wechat","Yandex Browser":"yandex",Roku:"roku"},js={amazon_silk:"Amazon Silk",android:"Android Browser",bada:"Bada",blackberry:"BlackBerry",chrome:"Chrome",chromium:"Chromium",electron:"Electron",epiphany:"Epiphany",firefox:"Firefox",focus:"Focus",generic:"Generic",googlebot:"Googlebot",google_search:"Google Search",ie:"Internet Explorer",k_meleon:"K-Meleon",maxthon:"Maxthon",edge:"Microsoft Edge",mz:"MZ Browser",naver:"NAVER Whale Browser",opera:"Opera",opera_coast:"Opera Coast",phantomjs:"PhantomJS",puffin:"Puffin",qupzilla:"QupZilla",qq:"QQ Browser",qqlite:"QQ Browser Lite",safari:"Safari",sailfish:"Sailfish",samsung_internet:"Samsung Internet for Android",seamonkey:"SeaMonkey",sleipnir:"Sleipnir",swing:"Swing",tizen:"Tizen",uc:"UC Browser",vivaldi:"Vivaldi",webos:"WebOS Browser",wechat:"WeChat",yandex:"Yandex Browser"},R={tablet:"tablet",mobile:"mobile",desktop:"desktop",tv:"tv"},O={WindowsPhone:"Windows Phone",Windows:"Windows",MacOS:"macOS",iOS:"iOS",Android:"Android",WebOS:"WebOS",BlackBerry:"BlackBerry",Bada:"Bada",Tizen:"Tizen",Linux:"Linux",ChromeOS:"Chrome OS",PlayStation4:"PlayStation 4",Roku:"Roku"},ue={EdgeHTML:"EdgeHTML",Blink:"Blink",Trident:"Trident",Presto:"Presto",Gecko:"Gecko",WebKit:"WebKit"};class m{static getFirstMatch(t,r){const n=r.match(t);return n&&n.length>0&&n[1]||""}static getSecondMatch(t,r){const n=r.match(t);return n&&n.length>1&&n[2]||""}static matchAndReturnConst(t,r,n){if(t.test(r))return n}static getWindowsVersionName(t){switch(t){case"NT":return"NT";case"XP":return"XP";case"NT 5.0":return"2000";case"NT 5.1":return"XP";case"NT 5.2":return"2003";case"NT 6.0":return"Vista";case"NT 6.1":return"7";case"NT 6.2":return"8";case"NT 6.3":return"8.1";case"NT 10.0":return"10";default:return}}static getMacOSVersionName(t){const r=t.split(".").splice(0,2).map(n=>parseInt(n,10)||0);if(r.push(0),r[0]===10)switch(r[1]){case 5:return"Leopard";case 6:return"Snow Leopard";case 7:return"Lion";case 8:return"Mountain Lion";case 9:return"Mavericks";case 10:return"Yosemite";case 11:return"El Capitan";case 12:return"Sierra";case 13:return"High Sierra";case 14:return"Mojave";case 15:return"Catalina";default:return}}static getAndroidVersionName(t){const r=t.split(".").splice(0,2).map(n=>parseInt(n,10)||0);if(r.push(0),!(r[0]===1&&r[1]<5)){if(r[0]===1&&r[1]<6)return"Cupcake";if(r[0]===1&&r[1]>=6)return"Donut";if(r[0]===2&&r[1]<2)return"Eclair";if(r[0]===2&&r[1]===2)return"Froyo";if(r[0]===2&&r[1]>2)return"Gingerbread";if(r[0]===3)return"Honeycomb";if(r[0]===4&&r[1]<1)return"Ice Cream Sandwich";if(r[0]===4&&r[1]<4)return"Jelly Bean";if(r[0]===4&&r[1]>=4)return"KitKat";if(r[0]===5)return"Lollipop";if(r[0]===6)return"Marshmallow";if(r[0]===7)return"Nougat";if(r[0]===8)return"Oreo";if(r[0]===9)return"Pie"}}static getVersionPrecision(t){return t.split(".").length}static compareVersions(t,r,n=!1){const s=m.getVersionPrecision(t),i=m.getVersionPrecision(r);let o=Math.max(s,i),a=0;const c=m.map([t,r],u=>{const d=o-m.getVersionPrecision(u),l=u+new Array(d+1).join(".0");return m.map(l.split("."),f=>new Array(20-f.length).join("0")+f).reverse()});for(n&&(a=o-Math.min(s,i)),o-=1;o>=a;){if(c[0][o]>c[1][o])return 1;if(c[0][o]===c[1][o]){if(o===a)return 0;o-=1}else if(c[0][o]<c[1][o])return-1}}static map(t,r){const n=[];let s;if(Array.prototype.map)return Array.prototype.map.call(t,r);for(s=0;s<t.length;s+=1)n.push(r(t[s]));return n}static find(t,r){let n,s;if(Array.prototype.find)return Array.prototype.find.call(t,r);for(n=0,s=t.length;n<s;n+=1){const i=t[n];if(r(i,n))return i}}static assign(t,...r){const n=t;let s,i;if(Object.assign)return Object.assign(t,...r);for(s=0,i=r.length;s<i;s+=1){const o=r[s];typeof o=="object"&&o!==null&&Object.keys(o).forEach(c=>{n[c]=o[c]})}return t}static getBrowserAlias(t){return Mu[t]}static getBrowserTypeByAlias(t){return js[t]||""}}const C=/version\/(\d+(\.?_?\d+)+)/i,Du=[{test:[/googlebot/i],describe(e){const t={name:"Googlebot"},r=m.getFirstMatch(/googlebot\/(\d+(\.\d+))/i,e)||m.getFirstMatch(C,e);return r&&(t.version=r),t}},{test:[/opera/i],describe(e){const t={name:"Opera"},r=m.getFirstMatch(C,e)||m.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\/|opios/i],describe(e){const t={name:"Opera"},r=m.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i,e)||m.getFirstMatch(C,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe(e){const t={name:"Samsung Internet for Android"},r=m.getFirstMatch(C,e)||m.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe(e){const t={name:"NAVER Whale Browser"},r=m.getFirstMatch(C,e)||m.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe(e){const t={name:"MZ Browser"},r=m.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,e)||m.getFirstMatch(C,e);return r&&(t.version=r),t}},{test:[/focus/i],describe(e){const t={name:"Focus"},r=m.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i,e)||m.getFirstMatch(C,e);return r&&(t.version=r),t}},{test:[/swing/i],describe(e){const t={name:"Swing"},r=m.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i,e)||m.getFirstMatch(C,e);return r&&(t.version=r),t}},{test:[/coast/i],describe(e){const t={name:"Opera Coast"},r=m.getFirstMatch(C,e)||m.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opt\/\d+(?:.?_?\d+)+/i],describe(e){const t={name:"Opera Touch"},r=m.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i,e)||m.getFirstMatch(C,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe(e){const t={name:"Yandex Browser"},r=m.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,e)||m.getFirstMatch(C,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe(e){const t={name:"UC Browser"},r=m.getFirstMatch(C,e)||m.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe(e){const t={name:"Maxthon"},r=m.getFirstMatch(C,e)||m.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe(e){const t={name:"Epiphany"},r=m.getFirstMatch(C,e)||m.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe(e){const t={name:"Puffin"},r=m.getFirstMatch(C,e)||m.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe(e){const t={name:"Sleipnir"},r=m.getFirstMatch(C,e)||m.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe(e){const t={name:"K-Meleon"},r=m.getFirstMatch(C,e)||m.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe(e){const t={name:"WeChat"},r=m.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,e)||m.getFirstMatch(C,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe(e){const t={name:/qqbrowserlite/i.test(e)?"QQ Browser Lite":"QQ Browser"},r=m.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,e)||m.getFirstMatch(C,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe(e){const t={name:"Internet Explorer"},r=m.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\sedg\//i],describe(e){const t={name:"Microsoft Edge"},r=m.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe(e){const t={name:"Microsoft Edge"},r=m.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe(e){const t={name:"Vivaldi"},r=m.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe(e){const t={name:"SeaMonkey"},r=m.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe(e){const t={name:"Sailfish"},r=m.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe(e){const t={name:"Amazon Silk"},r=m.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe(e){const t={name:"PhantomJS"},r=m.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe(e){const t={name:"SlimerJS"},r=m.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe(e){const t={name:"BlackBerry"},r=m.getFirstMatch(C,e)||m.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe(e){const t={name:"WebOS Browser"},r=m.getFirstMatch(C,e)||m.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe(e){const t={name:"Bada"},r=m.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe(e){const t={name:"Tizen"},r=m.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,e)||m.getFirstMatch(C,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe(e){const t={name:"QupZilla"},r=m.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,e)||m.getFirstMatch(C,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe(e){const t={name:"Firefox"},r=m.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/electron/i],describe(e){const t={name:"Electron"},r=m.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MiuiBrowser/i],describe(e){const t={name:"Miui"},r=m.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe(e){const t={name:"Chromium"},r=m.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,e)||m.getFirstMatch(C,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe(e){const t={name:"Chrome"},r=m.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe(e){const t={name:"Google Search"},r=m.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test(e){const t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe(e){const t={name:"Android Browser"},r=m.getFirstMatch(C,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe(e){const t={name:"PlayStation 4"},r=m.getFirstMatch(C,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe(e){const t={name:"Safari"},r=m.getFirstMatch(C,e);return r&&(t.version=r),t}},{test:[/.*/i],describe(e){const t=/^(.*)\/(.*) /,r=/^(.*)\/(.*)[ \t]\((.*)/,s=e.search("\\(")!==-1?r:t;return{name:m.getFirstMatch(s,e),version:m.getSecondMatch(s,e)}}}],Pu=[{test:[/Roku\/DVP/],describe(e){const t=m.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i,e);return{name:O.Roku,version:t}}},{test:[/windows phone/i],describe(e){const t=m.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i,e);return{name:O.WindowsPhone,version:t}}},{test:[/windows /i],describe(e){const t=m.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i,e),r=m.getWindowsVersionName(t);return{name:O.Windows,version:t,versionName:r}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe(e){const t={name:O.iOS},r=m.getSecondMatch(/(Version\/)(\d[\d.]+)/,e);return r&&(t.version=r),t}},{test:[/macintosh/i],describe(e){const t=m.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i,e).replace(/[_\s]/g,"."),r=m.getMacOSVersionName(t),n={name:O.MacOS,version:t};return r&&(n.versionName=r),n}},{test:[/(ipod|iphone|ipad)/i],describe(e){const t=m.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i,e).replace(/[_\s]/g,".");return{name:O.iOS,version:t}}},{test(e){const t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe(e){const t=m.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i,e),r=m.getAndroidVersionName(t),n={name:O.Android,version:t};return r&&(n.versionName=r),n}},{test:[/(web|hpw)[o0]s/i],describe(e){const t=m.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,e),r={name:O.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe(e){const t=m.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i,e)||m.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i,e)||m.getFirstMatch(/\bbb(\d+)/i,e);return{name:O.BlackBerry,version:t}}},{test:[/bada/i],describe(e){const t=m.getFirstMatch(/bada\/(\d+(\.\d+)*)/i,e);return{name:O.Bada,version:t}}},{test:[/tizen/i],describe(e){const t=m.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i,e);return{name:O.Tizen,version:t}}},{test:[/linux/i],describe(){return{name:O.Linux}}},{test:[/CrOS/],describe(){return{name:O.ChromeOS}}},{test:[/PlayStation 4/],describe(e){const t=m.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i,e);return{name:O.PlayStation4,version:t}}}],Bu=[{test:[/googlebot/i],describe(){return{type:"bot",vendor:"Google"}}},{test:[/huawei/i],describe(e){const t=m.getFirstMatch(/(can-l01)/i,e)&&"Nova",r={type:R.mobile,vendor:"Huawei"};return t&&(r.model=t),r}},{test:[/nexus\s*(?:7|8|9|10).*/i],describe(){return{type:R.tablet,vendor:"Nexus"}}},{test:[/ipad/i],describe(){return{type:R.tablet,vendor:"Apple",model:"iPad"}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe(){return{type:R.tablet,vendor:"Apple",model:"iPad"}}},{test:[/kftt build/i],describe(){return{type:R.tablet,vendor:"Amazon",model:"Kindle Fire HD 7"}}},{test:[/silk/i],describe(){return{type:R.tablet,vendor:"Amazon"}}},{test:[/tablet(?! pc)/i],describe(){return{type:R.tablet}}},{test(e){const t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe(e){const t=m.getFirstMatch(/(ipod|iphone)/i,e);return{type:R.mobile,vendor:"Apple",model:t}}},{test:[/nexus\s*[0-6].*/i,/galaxy nexus/i],describe(){return{type:R.mobile,vendor:"Nexus"}}},{test:[/[^-]mobi/i],describe(){return{type:R.mobile}}},{test(e){return e.getBrowserName(!0)==="blackberry"},describe(){return{type:R.mobile,vendor:"BlackBerry"}}},{test(e){return e.getBrowserName(!0)==="bada"},describe(){return{type:R.mobile}}},{test(e){return e.getBrowserName()==="windows phone"},describe(){return{type:R.mobile,vendor:"Microsoft"}}},{test(e){const t=Number(String(e.getOSVersion()).split(".")[0]);return e.getOSName(!0)==="android"&&t>=3},describe(){return{type:R.tablet}}},{test(e){return e.getOSName(!0)==="android"},describe(){return{type:R.mobile}}},{test(e){return e.getOSName(!0)==="macos"},describe(){return{type:R.desktop,vendor:"Apple"}}},{test(e){return e.getOSName(!0)==="windows"},describe(){return{type:R.desktop}}},{test(e){return e.getOSName(!0)==="linux"},describe(){return{type:R.desktop}}},{test(e){return e.getOSName(!0)==="playstation 4"},describe(){return{type:R.tv}}},{test(e){return e.getOSName(!0)==="roku"},describe(){return{type:R.tv}}}],ku=[{test(e){return e.getBrowserName(!0)==="microsoft edge"},describe(e){if(/\sedg\//i.test(e))return{name:ue.Blink};const r=m.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i,e);return{name:ue.EdgeHTML,version:r}}},{test:[/trident/i],describe(e){const t={name:ue.Trident},r=m.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test(e){return e.test(/presto/i)},describe(e){const t={name:ue.Presto},r=m.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test(e){const t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe(e){const t={name:ue.Gecko},r=m.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\/537\.36/i],describe(){return{name:ue.Blink}}},{test:[/(apple)?webkit/i],describe(e){const t={name:ue.WebKit},r=m.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}}];class Hs{constructor(t,r=!1){if(t==null||t==="")throw new Error("UserAgent parameter can't be empty");this._ua=t,this.parsedResult={},r!==!0&&this.parse()}getUA(){return this._ua}test(t){return t.test(this._ua)}parseBrowser(){this.parsedResult.browser={};const t=m.find(Du,r=>{if(typeof r.test=="function")return r.test(this);if(r.test instanceof Array)return r.test.some(n=>this.test(n));throw new Error("Browser's test function is not valid")});return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser}getBrowser(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()}getBrowserName(t){return t?String(this.getBrowser().name).toLowerCase()||"":this.getBrowser().name||""}getBrowserVersion(){return this.getBrowser().version}getOS(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()}parseOS(){this.parsedResult.os={};const t=m.find(Pu,r=>{if(typeof r.test=="function")return r.test(this);if(r.test instanceof Array)return r.test.some(n=>this.test(n));throw new Error("Browser's test function is not valid")});return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os}getOSName(t){const{name:r}=this.getOS();return t?String(r).toLowerCase()||"":r||""}getOSVersion(){return this.getOS().version}getPlatform(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()}getPlatformType(t=!1){const{type:r}=this.getPlatform();return t?String(r).toLowerCase()||"":r||""}parsePlatform(){this.parsedResult.platform={};const t=m.find(Bu,r=>{if(typeof r.test=="function")return r.test(this);if(r.test instanceof Array)return r.test.some(n=>this.test(n));throw new Error("Browser's test function is not valid")});return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform}getEngine(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()}getEngineName(t){return t?String(this.getEngine().name).toLowerCase()||"":this.getEngine().name||""}parseEngine(){this.parsedResult.engine={};const t=m.find(ku,r=>{if(typeof r.test=="function")return r.test(this);if(r.test instanceof Array)return r.test.some(n=>this.test(n));throw new Error("Browser's test function is not valid")});return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine}parse(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this}getResult(){return m.assign({},this.parsedResult)}satisfies(t){const r={};let n=0;const s={};let i=0;if(Object.keys(t).forEach(a=>{const c=t[a];typeof c=="string"?(s[a]=c,i+=1):typeof c=="object"&&(r[a]=c,n+=1)}),n>0){const a=Object.keys(r),c=m.find(a,d=>this.isOS(d));if(c){const d=this.satisfies(r[c]);if(d!==void 0)return d}const u=m.find(a,d=>this.isPlatform(d));if(u){const d=this.satisfies(r[u]);if(d!==void 0)return d}}if(i>0){const a=Object.keys(s),c=m.find(a,u=>this.isBrowser(u,!0));if(c!==void 0)return this.compareVersion(s[c])}}isBrowser(t,r=!1){const n=this.getBrowserName().toLowerCase();let s=t.toLowerCase();const i=m.getBrowserTypeByAlias(s);return r&&i&&(s=i.toLowerCase()),s===n}compareVersion(t){let r=[0],n=t,s=!1;const i=this.getBrowserVersion();if(typeof i=="string")return t[0]===">"||t[0]==="<"?(n=t.substr(1),t[1]==="="?(s=!0,n=t.substr(2)):r=[],t[0]===">"?r.push(1):r.push(-1)):t[0]==="="?n=t.substr(1):t[0]==="~"&&(s=!0,n=t.substr(1)),r.indexOf(m.compareVersions(i,n,s))>-1}isOS(t){return this.getOSName(!0)===String(t).toLowerCase()}isPlatform(t){return this.getPlatformType(!0)===String(t).toLowerCase()}isEngine(t){return this.getEngineName(!0)===String(t).toLowerCase()}is(t,r=!1){return this.isBrowser(t,r)||this.isOS(t)||this.isPlatform(t)}some(t=[]){return t.some(r=>this.is(r))}}/*!
 * Bowser - a browser detector
 * https://github.com/lancedikson/bowser
 * MIT License | (c) Dustin Diaz 2012-2015
 * MIT License | (c) Denis Demchenko 2015-2019
 */class zs{static getParser(t,r=!1){if(typeof t!="string")throw new Error("UserAgent should be a string");return new Hs(t,r)}static parse(t){return new Hs(t).getResult()}static get BROWSER_MAP(){return js}static get ENGINE_MAP(){return ue}static get OS_MAP(){return O}static get PLATFORMS_MAP(){return R}}const qs=({serviceId:e,clientVersion:t})=>async()=>{var s,i,o,a,c;const r=typeof window<"u"&&((s=window==null?void 0:window.navigator)!=null&&s.userAgent)?zs.parse(window.navigator.userAgent):void 0,n=[["aws-sdk-js",t],["ua","2.0"],[`os/${((i=r==null?void 0:r.os)==null?void 0:i.name)||"other"}`,(o=r==null?void 0:r.os)==null?void 0:o.version],["lang/js"],["md/browser",`${((a=r==null?void 0:r.browser)==null?void 0:a.name)??"unknown"}_${((c=r==null?void 0:r.browser)==null?void 0:c.version)??"unknown"}`]];return e&&n.push([`api/${e}`,t]),n},Ws=e=>()=>Promise.reject(e),Gs=typeof TextEncoder=="function"?new TextEncoder:null,Vs=e=>{if(typeof e=="string"){if(Gs)return Gs.encode(e).byteLength;let t=e.length;for(let r=t-1;r>=0;r--){const n=e.charCodeAt(r);n>127&&n<=2047?t++:n>2047&&n<=65535&&(t+=2),n>=56320&&n<=57343&&r--}return t}else{if(typeof e.byteLength=="number")return e.byteLength;if(typeof e.size=="number")return e.size}throw new Error(`Body Length computation failed for ${e}`)},Ks="required",K="fn",Z="argv",Ee="ref",Zs=!0,Xs="isSet",Ye="booleanEquals",Ce="error",et="endpoint",re="tree",dr="PartitionResult",Qs={[Ks]:!1,type:"String"},Js={[Ks]:!0,default:!1,type:"Boolean"},Ys={[Ee]:"Endpoint"},ei={[K]:Ye,[Z]:[{[Ee]:"UseFIPS"},!0]},ti={[K]:Ye,[Z]:[{[Ee]:"UseDualStack"},!0]},X={},ri={[K]:"getAttr",[Z]:[{[Ee]:dr},"supportsFIPS"]},ni={[K]:Ye,[Z]:[!0,{[K]:"getAttr",[Z]:[{[Ee]:dr},"supportsDualStack"]}]},si=[ei],ii=[ti],oi=[{[Ee]:"Region"}],Iu={version:"1.0",parameters:{Region:Qs,UseDualStack:Js,UseFIPS:Js,Endpoint:Qs},rules:[{conditions:[{[K]:Xs,[Z]:[Ys]}],rules:[{conditions:si,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:Ce},{conditions:ii,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:Ce},{endpoint:{url:Ys,properties:X,headers:X},type:et}],type:re},{conditions:[{[K]:Xs,[Z]:oi}],rules:[{conditions:[{[K]:"aws.partition",[Z]:oi,assign:dr}],rules:[{conditions:[ei,ti],rules:[{conditions:[{[K]:Ye,[Z]:[Zs,ri]},ni],rules:[{endpoint:{url:"https://translate-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:X,headers:X},type:et}],type:re},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:Ce}],type:re},{conditions:si,rules:[{conditions:[{[K]:Ye,[Z]:[ri,Zs]}],rules:[{endpoint:{url:"https://translate-fips.{Region}.{PartitionResult#dnsSuffix}",properties:X,headers:X},type:et}],type:re},{error:"FIPS is enabled but this partition does not support FIPS",type:Ce}],type:re},{conditions:ii,rules:[{conditions:[ni],rules:[{endpoint:{url:"https://translate.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:X,headers:X},type:et}],type:re},{error:"DualStack is enabled but this partition does not support DualStack",type:Ce}],type:re},{endpoint:{url:"https://translate.{Region}.{PartitionResult#dnsSuffix}",properties:X,headers:X},type:et}],type:re}],type:re},{error:"Invalid Configuration: Missing Region",type:Ce}]},Ou=(e,t={})=>sn(Iu,{endpointParams:e,logger:t.logger});Be.aws=kt;const $u=e=>({apiVersion:"2017-07-01",base64Decoder:(e==null?void 0:e.base64Decoder)??ht,base64Encoder:(e==null?void 0:e.base64Encoder)??jt,disableHostPrefix:(e==null?void 0:e.disableHostPrefix)??!1,endpointProvider:(e==null?void 0:e.endpointProvider)??Ou,extensions:(e==null?void 0:e.extensions)??[],httpAuthSchemeProvider:(e==null?void 0:e.httpAuthSchemeProvider)??$c,httpAuthSchemes:(e==null?void 0:e.httpAuthSchemes)??[{schemeId:"aws.auth#sigv4",identityProvider:t=>t.getIdentityProvider("aws.auth#sigv4"),signer:new Xn}],logger:(e==null?void 0:e.logger)??new Lt,serviceId:(e==null?void 0:e.serviceId)??"Translate",urlParser:(e==null?void 0:e.urlParser)??Oe,utf8Decoder:(e==null?void 0:e.utf8Decoder)??he,utf8Encoder:(e==null?void 0:e.utf8Encoder)??Ut}),Fu=(e,t,r)=>{let n,s,i,o=!1;const a=async()=>{s||(s=e());try{n=await s,i=!0,o=!1}finally{s=void 0}return n};return t===void 0?async c=>((!i||c!=null&&c.forceRefresh)&&(n=await a()),n):async c=>((!i||c!=null&&c.forceRefresh)&&(n=await a()),o?n:r&&!r(n)?(o=!0,n):(t(n)&&await a(),n))},Nu=["in-region","cross-region","mobile","standard","legacy"],ai=({defaultsMode:e}={})=>Fu(async()=>{const t=typeof e=="function"?await e():e;switch(t==null?void 0:t.toLowerCase()){case"auto":return Promise.resolve(Lu()?"mobile":"standard");case"mobile":case"in-region":case"cross-region":case"standard":case"legacy":return Promise.resolve(t==null?void 0:t.toLocaleLowerCase());case void 0:return Promise.resolve("legacy");default:throw new Error(`Invalid parameter for "defaultsMode", expect ${Nu.join(", ")}, got ${t}`)}}),Lu=()=>{var r,n;const e=typeof window<"u"&&((r=window==null?void 0:window.navigator)!=null&&r.userAgent)?zs.parse(window.navigator.userAgent):void 0,t=(n=e==null?void 0:e.platform)==null?void 0:n.type;return t==="tablet"||t==="mobile"},Uu=e=>{const t=ai(e),r=()=>t().then(Fn),n=$u(e);return{...n,...e,runtime:"browser",defaultsMode:t,bodyLengthChecker:(e==null?void 0:e.bodyLengthChecker)??Vs,credentialDefaultProvider:(e==null?void 0:e.credentialDefaultProvider)??(s=>()=>Promise.reject(new Error("Credential is missing"))),defaultUserAgentProvider:(e==null?void 0:e.defaultUserAgentProvider)??qs({serviceId:n.serviceId,clientVersion:Uc.version}),maxAttempts:(e==null?void 0:e.maxAttempts)??$e,region:(e==null?void 0:e.region)??Ws("Region is missing"),requestHandler:pt.create((e==null?void 0:e.requestHandler)??r),retryMode:(e==null?void 0:e.retryMode)??(async()=>(await r()).retryMode||An),sha256:(e==null?void 0:e.sha256)??Xt.Sha256,streamCollector:(e==null?void 0:e.streamCollector)??kn,useDualstackEndpoint:(e==null?void 0:e.useDualstackEndpoint)??(()=>Promise.resolve(fn)),useFipsEndpoint:(e==null?void 0:e.useFipsEndpoint)??(()=>Promise.resolve(hn))}},ci=e=>{let t=async()=>{if(e.region===void 0)throw new Error("Region is missing from runtimeConfig");const r=e.region;return typeof r=="string"?r:r()};return{setRegion(r){t=r},region(){return t}}},ui=e=>({region:e.region()}),ju=e=>{const t=e.httpAuthSchemes;let r=e.httpAuthSchemeProvider,n=e.credentials;return{setHttpAuthScheme(s){const i=t.findIndex(o=>o.schemeId===s.schemeId);i===-1?t.push(s):t.splice(i,1,s)},httpAuthSchemes(){return t},setHttpAuthSchemeProvider(s){r=s},httpAuthSchemeProvider(){return r},setCredentials(s){n=s},credentials(){return n}}},Hu=e=>({httpAuthSchemes:e.httpAuthSchemes(),httpAuthSchemeProvider:e.httpAuthSchemeProvider(),credentials:e.credentials()}),wt=e=>e,zu=(e,t)=>{const r={...wt(ci(e)),...wt(Nn(e)),...wt(Lr(e)),...wt(ju(e))};return t.forEach(n=>n.configure(r)),{...e,...ui(r),...Ln(r),...Ur(r),...Hu(r)}};class qu extends Bn{constructor(...[t]){const r=Uu(t||{}),n=Nc(r),s=gn(n),i=bn(s),o=Mn(i),a=o,c=Xr(a),u=Fc(c),d=zu(u,(t==null?void 0:t.extensions)||[]);super(d),this.config=d,this.middlewareStack.use(jn(this.config)),this.middlewareStack.use(Gn(this.config)),this.middlewareStack.use(Gr(this.config)),this.middlewareStack.use(Vr(this.config)),this.middlewareStack.use(Zr(this.config)),this.middlewareStack.use(dn(this.config)),this.middlewareStack.use(vn(this.config,{httpAuthSchemeParametersProvider:this.getDefaultHttpAuthSchemeParametersProvider(),identityProviderConfigProvider:this.getIdentityProviderConfigProvider()})),this.middlewareStack.use(Hn(this.config))}destroy(){super.destroy()}getDefaultHttpAuthSchemeParametersProvider(){return Ic}getIdentityProviderConfigProvider(){return async t=>new zn({"aws.auth#sigv4":t.credentials})}}class M extends zt{constructor(t){super(t),Object.setPrototypeOf(this,M.prototype)}}class lr extends M{constructor(t){super({name:"ConcurrentModificationException",$fault:"client",...t}),this.name="ConcurrentModificationException",this.$fault="client",Object.setPrototypeOf(this,lr.prototype),this.Message=t.Message}}class fr extends M{constructor(t){super({name:"ConflictException",$fault:"client",...t}),this.name="ConflictException",this.$fault="client",Object.setPrototypeOf(this,fr.prototype),this.Message=t.Message}}class hr extends M{constructor(t){super({name:"InternalServerException",$fault:"server",...t}),this.name="InternalServerException",this.$fault="server",Object.setPrototypeOf(this,hr.prototype),this.Message=t.Message}}class pr extends M{constructor(t){super({name:"InvalidParameterValueException",$fault:"client",...t}),this.name="InvalidParameterValueException",this.$fault="client",Object.setPrototypeOf(this,pr.prototype),this.Message=t.Message}}class mr extends M{constructor(t){super({name:"InvalidRequestException",$fault:"client",...t}),this.name="InvalidRequestException",this.$fault="client",Object.setPrototypeOf(this,mr.prototype),this.Message=t.Message}}class gr extends M{constructor(t){super({name:"LimitExceededException",$fault:"client",...t}),this.name="LimitExceededException",this.$fault="client",Object.setPrototypeOf(this,gr.prototype),this.Message=t.Message}}class yr extends M{constructor(t){super({name:"TooManyRequestsException",$fault:"client",...t}),this.name="TooManyRequestsException",this.$fault="client",Object.setPrototypeOf(this,yr.prototype),this.Message=t.Message}}class wr extends M{constructor(t){super({name:"TooManyTagsException",$fault:"client",...t}),this.name="TooManyTagsException",this.$fault="client",Object.setPrototypeOf(this,wr.prototype),this.ResourceArn=t.ResourceArn}}class br extends M{constructor(t){super({name:"ResourceNotFoundException",$fault:"client",...t}),this.name="ResourceNotFoundException",this.$fault="client",Object.setPrototypeOf(this,br.prototype),this.Message=t.Message}}class vr extends M{constructor(t){super({name:"UnsupportedDisplayLanguageCodeException",$fault:"client",...t}),this.name="UnsupportedDisplayLanguageCodeException",this.$fault="client",Object.setPrototypeOf(this,vr.prototype),this.Message=t.Message,this.DisplayLanguageCode=t.DisplayLanguageCode}}class Ar extends M{constructor(t){super({name:"InvalidFilterException",$fault:"client",...t}),this.name="InvalidFilterException",this.$fault="client",Object.setPrototypeOf(this,Ar.prototype),this.Message=t.Message}}class xr extends M{constructor(t){super({name:"UnsupportedLanguagePairException",$fault:"client",...t}),this.name="UnsupportedLanguagePairException",this.$fault="client",Object.setPrototypeOf(this,xr.prototype),this.Message=t.Message,this.SourceLanguageCode=t.SourceLanguageCode,this.TargetLanguageCode=t.TargetLanguageCode}}class Sr extends M{constructor(t){super({name:"ServiceUnavailableException",$fault:"server",...t}),this.name="ServiceUnavailableException",this.$fault="server",Object.setPrototypeOf(this,Sr.prototype),this.Message=t.Message}}class Er extends M{constructor(t){super({name:"DetectedLanguageLowConfidenceException",$fault:"client",...t}),this.name="DetectedLanguageLowConfidenceException",this.$fault="client",Object.setPrototypeOf(this,Er.prototype),this.Message=t.Message,this.DetectedLanguageCode=t.DetectedLanguageCode}}class Cr extends M{constructor(t){super({name:"TextSizeLimitExceededException",$fault:"client",...t}),this.name="TextSizeLimitExceededException",this.$fault="client",Object.setPrototypeOf(this,Cr.prototype),this.Message=t.Message}}const Wu=async(e,t)=>{const r=ld("TranslateText");let n;return n=JSON.stringify(T(e)),dd(t,r,"/",void 0,n)},Gu=async(e,t)=>{if(e.statusCode>=300)return Vu(e,t);const r=await fs(e.body,t);let n={};return n=T(r),{$metadata:I(e),...n}},Vu=async(e,t)=>{const r={...e,body:await Bc(e.body,t)},n=kc(e,r.body);switch(n){case"ConcurrentModificationException":case"com.amazonaws.translate#ConcurrentModificationException":throw await Ku(r);case"ConflictException":case"com.amazonaws.translate#ConflictException":throw await Zu(r);case"InternalServerException":case"com.amazonaws.translate#InternalServerException":throw await Qu(r);case"InvalidParameterValueException":case"com.amazonaws.translate#InvalidParameterValueException":throw await Yu(r);case"InvalidRequestException":case"com.amazonaws.translate#InvalidRequestException":throw await ed(r);case"LimitExceededException":case"com.amazonaws.translate#LimitExceededException":throw await td(r);case"TooManyRequestsException":case"com.amazonaws.translate#TooManyRequestsException":throw await id(r);case"TooManyTagsException":case"com.amazonaws.translate#TooManyTagsException":throw await od(r);case"ResourceNotFoundException":case"com.amazonaws.translate#ResourceNotFoundException":throw await rd(r);case"UnsupportedDisplayLanguageCodeException":case"com.amazonaws.translate#UnsupportedDisplayLanguageCodeException":throw await ad(r);case"InvalidFilterException":case"com.amazonaws.translate#InvalidFilterException":throw await Ju(r);case"UnsupportedLanguagePairException":case"com.amazonaws.translate#UnsupportedLanguagePairException":throw await cd(r);case"ServiceUnavailableException":case"com.amazonaws.translate#ServiceUnavailableException":throw await nd(r);case"DetectedLanguageLowConfidenceException":case"com.amazonaws.translate#DetectedLanguageLowConfidenceException":throw await Xu(r);case"TextSizeLimitExceededException":case"com.amazonaws.translate#TextSizeLimitExceededException":throw await sd(r);default:const s=r.body;return ud({output:e,parsedBody:s,errorCode:n})}},Ku=async(e,t)=>{const r=e.body,n=T(r),s=new lr({$metadata:I(e),...n});return k(s,r)},Zu=async(e,t)=>{const r=e.body,n=T(r),s=new fr({$metadata:I(e),...n});return k(s,r)},Xu=async(e,t)=>{const r=e.body,n=T(r),s=new Er({$metadata:I(e),...n});return k(s,r)},Qu=async(e,t)=>{const r=e.body,n=T(r),s=new hr({$metadata:I(e),...n});return k(s,r)},Ju=async(e,t)=>{const r=e.body,n=T(r),s=new Ar({$metadata:I(e),...n});return k(s,r)},Yu=async(e,t)=>{const r=e.body,n=T(r),s=new pr({$metadata:I(e),...n});return k(s,r)},ed=async(e,t)=>{const r=e.body,n=T(r),s=new mr({$metadata:I(e),...n});return k(s,r)},td=async(e,t)=>{const r=e.body,n=T(r),s=new gr({$metadata:I(e),...n});return k(s,r)},rd=async(e,t)=>{const r=e.body,n=T(r),s=new br({$metadata:I(e),...n});return k(s,r)},nd=async(e,t)=>{const r=e.body,n=T(r),s=new Sr({$metadata:I(e),...n});return k(s,r)},sd=async(e,t)=>{const r=e.body,n=T(r),s=new Cr({$metadata:I(e),...n});return k(s,r)},id=async(e,t)=>{const r=e.body,n=T(r),s=new yr({$metadata:I(e),...n});return k(s,r)},od=async(e,t)=>{const r=e.body,n=T(r),s=new wr({$metadata:I(e),...n});return k(s,r)},ad=async(e,t)=>{const r=e.body,n=T(r),s=new vr({$metadata:I(e),...n});return k(s,r)},cd=async(e,t)=>{const r=e.body,n=T(r),s=new xr({$metadata:I(e),...n});return k(s,r)},I=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),ud=ja(M),dd=async(e,t,r,n,s)=>{const{hostname:i,protocol:o="https",port:a,path:c}=await e.endpoint(),u={protocol:o,hostname:i,port:a,method:"POST",path:c.endsWith("/")?c.slice(0,-1)+r:c+r,headers:t};return n!==void 0&&(u.hostname=n),s!==void 0&&(u.body=s),new V(u)};function ld(e){return{"content-type":"application/x-amz-json-1.1","x-amz-target":`AWSShineFrontendService_20170701.${e}`}}class fd extends $n.classBuilder().ep({...Lc}).m(function(t,r,n,s){return[ra(n,this.serialize,this.deserialize),na(n,t.getEndpointParameterInstructions())]}).s("AWSShineFrontendService_20170701","TranslateText",{}).n("TranslateClient","TranslateTextCommand").f(void 0,void 0).ser(Wu).de(Gu).build(){}const hd=["SCRIPT","STYLE","PRE","#comment","NOSCRIPT","CODE"];var me=(e=>(e.AWS_REGION="awsRegion",e.AWS_ACCESS_KEY_ID="awsAccessKeyId",e.AWS_SECRET_ACCESS_KEY="awsSecretAccessKey",e))(me||{}),ne=(e=>(e.CACHING_ENABLED="cachingEnabled",e.DEFAULT_SOURCE_LANG="defaultSourceLang",e.DEFAULT_TARGET_LANG="defaultTargetLang",e.BEDROCK_ENABLED="bedrockEnabled",e))(ne||{});function di(e,t={pageMap:[],nodeMap:{}}){const r=pd(e);if(r){const s=Object.keys(t.nodeMap).length+1;t.nodeMap[`${s}`]=e,t.pageMap.push({id:s.toString(),originalText:r,translatedText:null})}const n=e.nodeName;return!hd.includes(n)&&e.childNodes.length>0&&e.childNodes.forEach(s=>{di(s,t)}),t}function pd(e){if(e.nodeType===e.TEXT_NODE){const t=e.textContent;if(t!==null&&/\w+/g.test(t))return t}return null}async function md(e,t,r,n,s){t||await Promise.all(s.map(async i=>{const o=new fd({Text:i.originalText,SourceLanguageCode:r,TargetLanguageCode:n}),a=await e.send(o),c=window.location.href,u=H(c,{}),d=`${r}-${n}`,l=u[d]??[],f={id:i.id,originalText:i.originalText,translatedText:a.TranslatedText},h=l.map(p=>p.id==i.id?f:p);u[d]=h,G(c,u)}))}function li(e,t,r){const n=H(e,null);return(n==null?void 0:n[`${t}-${r}`])??[]}function gd(e,t,r,n){const s=H(e,{}),i=`${t}-${r}`,o=s[i]??[],a=new Map;n.forEach(u=>{a.set(u.id,u)});const c=[];o.forEach(u=>{const d=a.get(u.id);d&&u.originalText===d.originalText&&(c.push(u),a.delete(u.id))}),a.forEach(u=>{c.push(u)}),s[i]=c,G(e,s)}function yd(e,t,r){const n=e[t];n&&(n.textContent=r)}function fi(){const e=document.querySelector("body"),t=document.createElement("div");t.id="amazon-translate-overlay",t.innerText="Translating...",t.style.position="fixed",t.style.bottom="0",t.style.left="0",t.style.zIndex="1000000000",t.style.padding="5px",t.style.color="#ffffff",t.style.fontSize="16px",t.style.fontWeight="bold",t.style.fontFamily="Arial",t.style.backgroundColor="#dd6b10",e==null||e.appendChild(t)}function hi(){var t;const e=document.querySelector("#amazon-translate-overlay");(t=e==null?void 0:e.parentNode)==null||t.removeChild(e)}const wd=e=>({...e,eventStreamMarshaller:e.eventStreamSerdeProvider(e)}),bd=async(e,t,r)=>({operation:Ie(t).operation,region:await te(e.region)()||(()=>{throw new Error("expected `region` to be configured for `aws.auth#sigv4`")})()});function vd(e){return{schemeId:"aws.auth#sigv4",signingProperties:{name:"bedrock",region:e.region},propertiesExtractor:(t,r)=>({signingProperties:{config:t,context:r}})}}const Ad=e=>{const t=[];switch(e.operation){default:t.push(vd(e))}return t},xd=e=>({...ls(e)}),Sd=e=>({...e,useDualstackEndpoint:e.useDualstackEndpoint??!1,useFipsEndpoint:e.useFipsEndpoint??!1,defaultSigningName:"bedrock"}),Ed={name:"@aws-sdk/client-bedrock-runtime",description:"AWS SDK for JavaScript Bedrock Runtime Client for Node.js, Browser and React Native",version:"3.561.0",scripts:{build:"concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'","build:cjs":"node ../../scripts/compilation/inline client-bedrock-runtime","build:es":"tsc -p tsconfig.es.json","build:include:deps":"lerna run --scope $npm_package_name --include-dependencies build","build:types":"tsc -p tsconfig.types.json","build:types:downlevel":"downlevel-dts dist-types dist-types/ts3.4",clean:"rimraf ./dist-* && rimraf *.tsbuildinfo","extract:docs":"api-extractor run --local","generate:client":"node ../../scripts/generate-clients/single-service --solo bedrock-runtime"},main:"./dist-cjs/index.js",types:"./dist-types/index.d.ts",module:"./dist-es/index.js",sideEffects:!1,dependencies:{"@aws-crypto/sha256-browser":"3.0.0","@aws-crypto/sha256-js":"3.0.0","@aws-sdk/client-sts":"3.556.0","@aws-sdk/core":"3.556.0","@aws-sdk/credential-provider-node":"3.556.0","@aws-sdk/middleware-host-header":"3.535.0","@aws-sdk/middleware-logger":"3.535.0","@aws-sdk/middleware-recursion-detection":"3.535.0","@aws-sdk/middleware-user-agent":"3.540.0","@aws-sdk/region-config-resolver":"3.535.0","@aws-sdk/types":"3.535.0","@aws-sdk/util-endpoints":"3.540.0","@aws-sdk/util-user-agent-browser":"3.535.0","@aws-sdk/util-user-agent-node":"3.535.0","@smithy/config-resolver":"^2.2.0","@smithy/core":"^1.4.2","@smithy/eventstream-serde-browser":"^2.2.0","@smithy/eventstream-serde-config-resolver":"^2.2.0","@smithy/eventstream-serde-node":"^2.2.0","@smithy/fetch-http-handler":"^2.5.0","@smithy/hash-node":"^2.2.0","@smithy/invalid-dependency":"^2.2.0","@smithy/middleware-content-length":"^2.2.0","@smithy/middleware-endpoint":"^2.5.1","@smithy/middleware-retry":"^2.3.1","@smithy/middleware-serde":"^2.3.0","@smithy/middleware-stack":"^2.2.0","@smithy/node-config-provider":"^2.3.0","@smithy/node-http-handler":"^2.5.0","@smithy/protocol-http":"^3.3.0","@smithy/smithy-client":"^2.5.1","@smithy/types":"^2.12.0","@smithy/url-parser":"^2.2.0","@smithy/util-base64":"^2.3.0","@smithy/util-body-length-browser":"^2.2.0","@smithy/util-body-length-node":"^2.3.0","@smithy/util-defaults-mode-browser":"^2.2.1","@smithy/util-defaults-mode-node":"^2.3.1","@smithy/util-endpoints":"^1.2.0","@smithy/util-middleware":"^2.2.0","@smithy/util-retry":"^2.2.0","@smithy/util-stream":"^2.2.0","@smithy/util-utf8":"^2.3.0",tslib:"^2.6.2"},devDependencies:{"@smithy/service-client-documentation-generator":"^2.2.0","@tsconfig/node14":"1.0.3","@types/node":"^14.14.31",concurrently:"7.0.0","downlevel-dts":"0.10.1",rimraf:"3.0.2",typescript:"~4.9.5"},engines:{node:">=14.0.0"},typesVersions:{"<4.0":{"dist-types/*":["dist-types/ts3.4/*"]}},files:["dist-*/**"],author:{name:"AWS SDK for JavaScript Team",url:"https://aws.amazon.com/javascript/"},license:"Apache-2.0",browser:{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.browser"},"react-native":{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.native"},homepage:"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-bedrock-runtime",repository:{type:"git",url:"https://github.com/aws/aws-sdk-js-v3.git",directory:"clients/client-bedrock-runtime"}};var _r={},tt={},pi;function Cd(){if(pi)return tt;pi=1,Object.defineProperty(tt,"__esModule",{value:!0}),tt.AwsCrc32=void 0;var e=ce,t=Ze(),r=gi(),n=function(){function s(){this.crc32=new r.Crc32}return s.prototype.update=function(i){(0,t.isEmptyData)(i)||this.crc32.update((0,t.convertToBuffer)(i))},s.prototype.digest=function(){return e.__awaiter(this,void 0,void 0,function(){return e.__generator(this,function(i){return[2,(0,t.numToUint8)(this.crc32.digest())]})})},s.prototype.reset=function(){this.crc32=new r.Crc32},s}();return tt.AwsCrc32=n,tt}var mi;function gi(){return mi||(mi=1,function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.AwsCrc32=e.Crc32=e.crc32=void 0;var t=ce,r=Ze();function n(c){return new s().update(c).digest()}e.crc32=n;var s=function(){function c(){this.checksum=4294967295}return c.prototype.update=function(u){var d,l;try{for(var f=t.__values(u),h=f.next();!h.done;h=f.next()){var p=h.value;this.checksum=this.checksum>>>8^o[(this.checksum^p)&255]}}catch(g){d={error:g}}finally{try{h&&!h.done&&(l=f.return)&&l.call(f)}finally{if(d)throw d.error}}return this},c.prototype.digest=function(){return(this.checksum^4294967295)>>>0},c}();e.Crc32=s;var i=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117],o=(0,r.uint32ArrayFrom)(i),a=Cd();Object.defineProperty(e,"AwsCrc32",{enumerable:!0,get:function(){return a.AwsCrc32}})}(_r)),_r}var yi=gi();class rt{constructor(t){if(this.bytes=t,t.byteLength!==8)throw new Error("Int64 buffers must be exactly 8 bytes")}static fromNumber(t){if(t>9223372036854776e3||t<-9223372036854776e3)throw new Error(`${t} is too large (or, if negative, too small) to represent as an Int64`);const r=new Uint8Array(8);for(let n=7,s=Math.abs(Math.round(t));n>-1&&s>0;n--,s/=256)r[n]=s;return t<0&&wi(r),new rt(r)}valueOf(){const t=this.bytes.slice(0),r=t[0]&128;return r&&wi(t),parseInt(L(t),16)*(r?-1:1)}toString(){return String(this.valueOf())}}function wi(e){for(let t=0;t<8;t++)e[t]^=255;for(let t=7;t>-1&&(e[t]++,e[t]===0);t--);}class _d{constructor(t,r){this.toUtf8=t,this.fromUtf8=r}format(t){const r=[];for(const i of Object.keys(t)){const o=this.fromUtf8(i);r.push(Uint8Array.from([o.byteLength]),o,this.formatHeaderValue(t[i]))}const n=new Uint8Array(r.reduce((i,o)=>i+o.byteLength,0));let s=0;for(const i of r)n.set(i,s),s+=i.byteLength;return n}formatHeaderValue(t){switch(t.type){case"boolean":return Uint8Array.from([t.value?0:1]);case"byte":return Uint8Array.from([2,t.value]);case"short":const r=new DataView(new ArrayBuffer(3));return r.setUint8(0,3),r.setInt16(1,t.value,!1),new Uint8Array(r.buffer);case"integer":const n=new DataView(new ArrayBuffer(5));return n.setUint8(0,4),n.setInt32(1,t.value,!1),new Uint8Array(n.buffer);case"long":const s=new Uint8Array(9);return s[0]=5,s.set(t.value.bytes,1),s;case"binary":const i=new DataView(new ArrayBuffer(3+t.value.byteLength));i.setUint8(0,6),i.setUint16(1,t.value.byteLength,!1);const o=new Uint8Array(i.buffer);return o.set(t.value,3),o;case"string":const a=this.fromUtf8(t.value),c=new DataView(new ArrayBuffer(3+a.byteLength));c.setUint8(0,7),c.setUint16(1,a.byteLength,!1);const u=new Uint8Array(c.buffer);return u.set(a,3),u;case"timestamp":const d=new Uint8Array(9);return d[0]=8,d.set(rt.fromNumber(t.value.valueOf()).bytes,1),d;case"uuid":if(!Od.test(t.value))throw new Error(`Invalid UUID received: ${t.value}`);const l=new Uint8Array(17);return l[0]=9,l.set(On(t.value.replace(/\-/g,"")),1),l}}parse(t){const r={};let n=0;for(;n<t.byteLength;){const s=t.getUint8(n++),i=this.toUtf8(new Uint8Array(t.buffer,t.byteOffset+n,s));switch(n+=s,t.getUint8(n++)){case 0:r[i]={type:vi,value:!0};break;case 1:r[i]={type:vi,value:!1};break;case 2:r[i]={type:Rd,value:t.getInt8(n++)};break;case 3:r[i]={type:Td,value:t.getInt16(n,!1)},n+=2;break;case 4:r[i]={type:Md,value:t.getInt32(n,!1)},n+=4;break;case 5:r[i]={type:Dd,value:new rt(new Uint8Array(t.buffer,t.byteOffset+n,8))},n+=8;break;case 6:const o=t.getUint16(n,!1);n+=2,r[i]={type:Pd,value:new Uint8Array(t.buffer,t.byteOffset+n,o)},n+=o;break;case 7:const a=t.getUint16(n,!1);n+=2,r[i]={type:Bd,value:this.toUtf8(new Uint8Array(t.buffer,t.byteOffset+n,a))},n+=a;break;case 8:r[i]={type:kd,value:new Date(new rt(new Uint8Array(t.buffer,t.byteOffset+n,8)).valueOf())},n+=8;break;case 9:const c=new Uint8Array(t.buffer,t.byteOffset+n,16);n+=16,r[i]={type:Id,value:`${L(c.subarray(0,4))}-${L(c.subarray(4,6))}-${L(c.subarray(6,8))}-${L(c.subarray(8,10))}-${L(c.subarray(10))}`};break;default:throw new Error("Unrecognized header type tag")}}return r}}var bi;(function(e){e[e.boolTrue=0]="boolTrue",e[e.boolFalse=1]="boolFalse",e[e.byte=2]="byte",e[e.short=3]="short",e[e.integer=4]="integer",e[e.long=5]="long",e[e.byteArray=6]="byteArray",e[e.string=7]="string",e[e.timestamp=8]="timestamp",e[e.uuid=9]="uuid"})(bi||(bi={}));const vi="boolean",Rd="byte",Td="short",Md="integer",Dd="long",Pd="binary",Bd="string",kd="timestamp",Id="uuid",Od=/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/,Ai=4,de=Ai*2,ge=4,$d=de+ge*2;function Fd({byteLength:e,byteOffset:t,buffer:r}){if(e<$d)throw new Error("Provided message too short to accommodate event stream message overhead");const n=new DataView(r,t,e),s=n.getUint32(0,!1);if(e!==s)throw new Error("Reported message length does not match received message length");const i=n.getUint32(Ai,!1),o=n.getUint32(de,!1),a=n.getUint32(e-ge,!1),c=new yi.Crc32().update(new Uint8Array(r,t,de));if(o!==c.digest())throw new Error(`The prelude checksum specified in the message (${o}) does not match the calculated CRC32 checksum (${c.digest()})`);if(c.update(new Uint8Array(r,t+de,e-(de+ge))),a!==c.digest())throw new Error(`The message checksum (${c.digest()}) did not match the expected value of ${a}`);return{headers:new DataView(r,t+de+ge,i),body:new Uint8Array(r,t+de+ge+i,s-i-(de+ge+ge))}}class Nd{constructor(t,r){this.headerMarshaller=new _d(t,r),this.messageBuffer=[],this.isEndOfStream=!1}feed(t){this.messageBuffer.push(this.decode(t))}endOfStream(){this.isEndOfStream=!0}getMessage(){const t=this.messageBuffer.pop(),r=this.isEndOfStream;return{getMessage(){return t},isEndOfStream(){return r}}}getAvailableMessages(){const t=this.messageBuffer;this.messageBuffer=[];const r=this.isEndOfStream;return{getMessages(){return t},isEndOfStream(){return r}}}encode({headers:t,body:r}){const n=this.headerMarshaller.format(t),s=n.byteLength+r.byteLength+16,i=new Uint8Array(s),o=new DataView(i.buffer,i.byteOffset,i.byteLength),a=new yi.Crc32;return o.setUint32(0,s,!1),o.setUint32(4,n.byteLength,!1),o.setUint32(8,a.update(i.subarray(0,8)).digest(),!1),i.set(n,12),i.set(r,n.byteLength+12),o.setUint32(s-4,a.update(i.subarray(8,s-4)).digest(),!1),i}decode(t){const{headers:r,body:n}=Fd(t);return{headers:this.headerMarshaller.parse(r),body:n}}formatHeaders(t){return this.headerMarshaller.format(t)}}class Ld{constructor(t){this.options=t}[Symbol.asyncIterator](){return this.asyncIterator()}async*asyncIterator(){for await(const t of this.options.inputStream)yield this.options.decoder.decode(t)}}class Ud{constructor(t){this.options=t}[Symbol.asyncIterator](){return this.asyncIterator()}async*asyncIterator(){for await(const t of this.options.messageStream)yield this.options.encoder.encode(t);this.options.includeEndFrame&&(yield new Uint8Array(0))}}class jd{constructor(t){this.options=t}[Symbol.asyncIterator](){return this.asyncIterator()}async*asyncIterator(){for await(const t of this.options.messageStream){const r=await this.options.deserializer(t);r!==void 0&&(yield r)}}}class Hd{constructor(t){this.options=t}[Symbol.asyncIterator](){return this.asyncIterator()}async*asyncIterator(){for await(const t of this.options.inputStream)yield this.options.serializer(t)}}function zd(e){let t=0,r=0,n=null,s=null;const i=a=>{if(typeof a!="number")throw new Error("Attempted to allocate an event message where size was not a number: "+a);t=a,r=4,n=new Uint8Array(a),new DataView(n.buffer).setUint32(0,a,!1)},o=async function*(){const a=e[Symbol.asyncIterator]();for(;;){const{value:c,done:u}=await a.next();if(u){if(t)if(t===r)yield n;else throw new Error("Truncated event message received.");else return;return}const d=c.length;let l=0;for(;l<d;){if(!n){const h=d-l;s||(s=new Uint8Array(4));const p=Math.min(4-r,h);if(s.set(c.slice(l,l+p),r),r+=p,l+=p,r<4)break;i(new DataView(s.buffer).getUint32(0,!1)),s=null}const f=Math.min(t-r,d-l);n.set(c.slice(l,l+f),r),r+=f,l+=f,t&&t===r&&(yield n,n=null,t=0,r=0)}}};return{[Symbol.asyncIterator]:o}}function qd(e,t){return async function(r){const{value:n}=r.headers[":message-type"];if(n==="error"){const s=new Error(r.headers[":error-message"].value||"UnknownError");throw s.name=r.headers[":error-code"].value,s}else if(n==="exception"){const s=r.headers[":exception-type"].value,i={[s]:r},o=await e(i);if(o.$unknown){const a=new Error(t(r.body));throw a.name=s,a}throw o[s]}else if(n==="event"){const s={[r.headers[":event-type"].value]:r},i=await e(s);return i.$unknown?void 0:i}else throw Error(`Unrecognizable event type: ${r.headers[":event-type"].value}`)}}let Wd=class{constructor({utf8Encoder:t,utf8Decoder:r}){this.eventStreamCodec=new Nd(t,r),this.utfEncoder=t}deserialize(t,r){const n=zd(t);return new jd({messageStream:new Ld({inputStream:n,decoder:this.eventStreamCodec}),deserializer:qd(r,this.utfEncoder)})}serialize(t,r){return new Ud({messageStream:new Hd({inputStream:t,serializer:r}),encoder:this.eventStreamCodec,includeEndFrame:!0})}};const Gd=e=>({[Symbol.asyncIterator]:async function*(){const t=e.getReader();try{for(;;){const{done:r,value:n}=await t.read();if(r)return;yield n}}finally{t.releaseLock()}}}),Vd=e=>{const t=e[Symbol.asyncIterator]();return new ReadableStream({async pull(r){const{done:n,value:s}=await t.next();if(n)return r.close();r.enqueue(s)}})};class Kd{constructor({utf8Encoder:t,utf8Decoder:r}){this.universalMarshaller=new Wd({utf8Decoder:r,utf8Encoder:t})}deserialize(t,r){const n=Zd(t)?Gd(t):t;return this.universalMarshaller.deserialize(n,r)}serialize(t,r){const n=this.universalMarshaller.serialize(t,r);return typeof ReadableStream=="function"?Vd(n):n}}const Zd=e=>typeof ReadableStream=="function"&&e instanceof ReadableStream,Xd=e=>new Kd(e),xi="required",Q="fn",J="argv",_e="ref",Si=!0,Ei="isSet",nt="booleanEquals",Re="error",st="endpoint",$="tree",Rr="PartitionResult",Ci={[xi]:!1,type:"String"},_i={[xi]:!0,default:!1,type:"Boolean"},Ri={[_e]:"Endpoint"},Ti={[Q]:nt,[J]:[{[_e]:"UseFIPS"},!0]},Mi={[Q]:nt,[J]:[{[_e]:"UseDualStack"},!0]},Y={},Di={[Q]:"getAttr",[J]:[{[_e]:Rr},"supportsFIPS"]},Pi={[Q]:nt,[J]:[!0,{[Q]:"getAttr",[J]:[{[_e]:Rr},"supportsDualStack"]}]},Bi=[Ti],ki=[Mi],Ii=[{[_e]:"Region"}],Qd={version:"1.0",parameters:{Region:Ci,UseDualStack:_i,UseFIPS:_i,Endpoint:Ci},rules:[{conditions:[{[Q]:Ei,[J]:[Ri]}],rules:[{conditions:Bi,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:Re},{rules:[{conditions:ki,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:Re},{endpoint:{url:Ri,properties:Y,headers:Y},type:st}],type:$}],type:$},{rules:[{conditions:[{[Q]:Ei,[J]:Ii}],rules:[{conditions:[{[Q]:"aws.partition",[J]:Ii,assign:Rr}],rules:[{conditions:[Ti,Mi],rules:[{conditions:[{[Q]:nt,[J]:[Si,Di]},Pi],rules:[{rules:[{endpoint:{url:"https://bedrock-runtime-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Y,headers:Y},type:st}],type:$}],type:$},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:Re}],type:$},{conditions:Bi,rules:[{conditions:[{[Q]:nt,[J]:[Di,Si]}],rules:[{rules:[{endpoint:{url:"https://bedrock-runtime-fips.{Region}.{PartitionResult#dnsSuffix}",properties:Y,headers:Y},type:st}],type:$}],type:$},{error:"FIPS is enabled but this partition does not support FIPS",type:Re}],type:$},{conditions:ki,rules:[{conditions:[Pi],rules:[{rules:[{endpoint:{url:"https://bedrock-runtime.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Y,headers:Y},type:st}],type:$}],type:$},{error:"DualStack is enabled but this partition does not support DualStack",type:Re}],type:$},{rules:[{endpoint:{url:"https://bedrock-runtime.{Region}.{PartitionResult#dnsSuffix}",properties:Y,headers:Y},type:st}],type:$}],type:$}],type:$},{error:"Invalid Configuration: Missing Region",type:Re}],type:$}]},Jd=(e,t={})=>sn(Qd,{endpointParams:e,logger:t.logger});Be.aws=kt;const Yd=e=>({apiVersion:"2023-09-30",base64Decoder:(e==null?void 0:e.base64Decoder)??ht,base64Encoder:(e==null?void 0:e.base64Encoder)??jt,disableHostPrefix:(e==null?void 0:e.disableHostPrefix)??!1,endpointProvider:(e==null?void 0:e.endpointProvider)??Jd,extensions:(e==null?void 0:e.extensions)??[],httpAuthSchemeProvider:(e==null?void 0:e.httpAuthSchemeProvider)??Ad,httpAuthSchemes:(e==null?void 0:e.httpAuthSchemes)??[{schemeId:"aws.auth#sigv4",identityProvider:t=>t.getIdentityProvider("aws.auth#sigv4"),signer:new Xn}],logger:(e==null?void 0:e.logger)??new Lt,serviceId:(e==null?void 0:e.serviceId)??"Bedrock Runtime",urlParser:(e==null?void 0:e.urlParser)??Oe,utf8Decoder:(e==null?void 0:e.utf8Decoder)??he,utf8Encoder:(e==null?void 0:e.utf8Encoder)??Ut}),el=e=>{const t=ai(e),r=()=>t().then(Fn),n=Yd(e);return{...n,...e,runtime:"browser",defaultsMode:t,bodyLengthChecker:(e==null?void 0:e.bodyLengthChecker)??Vs,credentialDefaultProvider:(e==null?void 0:e.credentialDefaultProvider)??(s=>()=>Promise.reject(new Error("Credential is missing"))),defaultUserAgentProvider:(e==null?void 0:e.defaultUserAgentProvider)??qs({serviceId:n.serviceId,clientVersion:Ed.version}),eventStreamSerdeProvider:(e==null?void 0:e.eventStreamSerdeProvider)??Xd,maxAttempts:(e==null?void 0:e.maxAttempts)??$e,region:(e==null?void 0:e.region)??Ws("Region is missing"),requestHandler:pt.create((e==null?void 0:e.requestHandler)??r),retryMode:(e==null?void 0:e.retryMode)??(async()=>(await r()).retryMode||An),sha256:(e==null?void 0:e.sha256)??Xt.Sha256,streamCollector:(e==null?void 0:e.streamCollector)??kn,useDualstackEndpoint:(e==null?void 0:e.useDualstackEndpoint)??(()=>Promise.resolve(fn)),useFipsEndpoint:(e==null?void 0:e.useFipsEndpoint)??(()=>Promise.resolve(hn))}},tl=e=>{const t=e.httpAuthSchemes;let r=e.httpAuthSchemeProvider,n=e.credentials;return{setHttpAuthScheme(s){const i=t.findIndex(o=>o.schemeId===s.schemeId);i===-1?t.push(s):t.splice(i,1,s)},httpAuthSchemes(){return t},setHttpAuthSchemeProvider(s){r=s},httpAuthSchemeProvider(){return r},setCredentials(s){n=s},credentials(){return n}}},rl=e=>({httpAuthSchemes:e.httpAuthSchemes(),httpAuthSchemeProvider:e.httpAuthSchemeProvider(),credentials:e.credentials()}),bt=e=>e,nl=(e,t)=>{const r={...bt(ci(e)),...bt(Nn(e)),...bt(Lr(e)),...bt(tl(e))};return t.forEach(n=>n.configure(r)),{...e,...ui(r),...Ln(r),...Ur(r),...rl(r)}};class sl extends Bn{constructor(...[t]){const r=el(t||{}),n=Sd(r),s=gn(n),i=bn(s),o=Mn(i),a=o,c=Xr(a),u=wd(c),d=xd(u),l=nl(d,(t==null?void 0:t.extensions)||[]);super(l),this.config=l,this.middlewareStack.use(jn(this.config)),this.middlewareStack.use(Gn(this.config)),this.middlewareStack.use(Gr(this.config)),this.middlewareStack.use(Vr(this.config)),this.middlewareStack.use(Zr(this.config)),this.middlewareStack.use(dn(this.config)),this.middlewareStack.use(vn(this.config,{httpAuthSchemeParametersProvider:this.getDefaultHttpAuthSchemeParametersProvider(),identityProviderConfigProvider:this.getIdentityProviderConfigProvider()})),this.middlewareStack.use(Hn(this.config))}destroy(){super.destroy()}getDefaultHttpAuthSchemeParametersProvider(){return bd}getIdentityProviderConfigProvider(){return async t=>new zn({"aws.auth#sigv4":t.credentials})}}async function Oi(e,t){if(t){const{pageMap:r,nodeMap:n}=di(t);if(console.log("crawl pageMap is: ",r),r.length>0){gd(window.location.href,e.langs.source,e.langs.target,r);const s=li(window.location.href,e.langs.source,e.langs.target);console.log("Content in the cache is:",s);const i=s.filter(a=>!a.translatedText);console.log("number of items to be translated:",i.length),i.length>0&&await il(e,i);const o=li(window.location.href,e.langs.source,e.langs.target);console.log("cache objects after translation: ",o),o.forEach(a=>a.translatedText?yd(n,a.id,a.translatedText):void 0)}}else throw new Error("Amazon Translate Error: The top level tag does not exist on the document.")}async function il({creds:e,langs:t,bedrockEnabled:r},n){console.debug("Using Bedrock:",r);const s=r?new sl(e):new qu(e);await md(s,r,t.source,t.target,n)}(()=>{console.log("Content script loaded."),al(),ol(),cl(),ul(),dl();const e=document.body,t={childList:!0,subtree:!0},r=s=>{for(const i of s)if(i.type==="childList"){const o=H("tabId");let a=!1;for(const c of i.addedNodes)c.textContent&&(a=!0);for(const c of i.removedNodes)c.textContent&&(a=!0);if(o&&a){const c={accessKeyId:H(me.AWS_ACCESS_KEY_ID)??"",secretAccessKey:H(me.AWS_SECRET_ACCESS_KEY)??""},d={creds:{region:H(me.AWS_REGION)??"",credentials:c},langs:{source:H(ne.DEFAULT_SOURCE_LANG)??"en",target:H(ne.DEFAULT_TARGET_LANG)??"pl"},tabId:o,cachingEnabled:H(ne.CACHING_ENABLED)??!1,bedrockEnabled:H(ne.BEDROCK_ENABLED)??!1};Oi(d,e).then(()=>{ve("status",{status:"complete",message:"Translation complete."},"popup")}).catch(l=>{console.error(l,e),ve("status",{status:"error",message:"An error occurred. The document failed to translate."},"content-script@"+o)})}}};new MutationObserver(r).observe(e,t)})();function ol(){De("show-overlay",()=>{fi()})}function al(){De("translate",({sender:{context:e,tabId:t},data:r})=>{fi();const n=t||r.tabId;H("awsRegion")===void 0&&(G(me.AWS_REGION,r.creds.region),G(me.AWS_ACCESS_KEY_ID,r.creds.credentials.accessKeyId),G(me.AWS_SECRET_ACCESS_KEY,r.creds.credentials.secretAccessKey),G(ne.DEFAULT_SOURCE_LANG,r.langs.source),G(ne.DEFAULT_TARGET_LANG,r.langs.target),G(ne.CACHING_ENABLED,r.cachingEnabled),G(ne.BEDROCK_ENABLED,r.bedrockEnabled),G("tabId",n)),ve("status",{status:"translating",message:""},"popup");const s=document.querySelector("body");Oi(r,s).then(()=>{ve("status",{status:"complete",message:"Translation complete."},"popup")}).catch(i=>{console.error(i,s),ve("status",{status:"error",message:"An error occurred. The document failed to translate."},e+"@"+n)}).finally(()=>{hi()})})}function cl(){De("translate-selection",({data:e})=>{const{translatedText:t}=e,r=document.querySelector("body"),n=document.createElement("div");n.id="amazon-translate-popup",n.style.position="fixed",n.style.bottom="0px",n.style.left="0px",n.style.width="98vw",n.style.maxWidth="98%",n.style.zIndex="1000000000",n.style.padding="20px",n.style.color="#000000",n.style.fontSize="16px",n.style.fontWeight="normal",n.style.fontFamily="Arial",n.style.backgroundColor="#ffffff",n.style.boxShadow="0px 0px 20px #000000";const s=document.createElement("div");s.innerText="x",s.style.position="absolute",s.style.top="10px",s.style.left="10px",s.addEventListener("click",a=>{var u,d;const c=(u=a.target)==null?void 0:u.parentNode;(d=c.parentNode)==null||d.removeChild(c)});const i=document.createElement("h3");i.innerText="Amazon Translate";const o=document.createElement("p");o.innerText=t,o.width="90%",n.appendChild(i),n.appendChild(o),n.appendChild(s),r==null||r.appendChild(n),document.body.addEventListener("click",()=>{n.parentNode.removeChild(n)},{once:!0}),n.addEventListener("click",a=>{a.stopPropagation()}),hi()})}function ul(){De("clearCache",e=>{const{sender:t,data:{tabId:r}}=e;console.info(`A message to clear cache for tab ${r} received`),co(window.location.href),ve("status",{status:"complete",message:"Cleared cache for this page."},t.context+"@"+r)})}function dl(){De("tab-prev",()=>{console.log("Registering tab-prev")})}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
